[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David LeBauer. Author, maintainer. Rob Kooper. Author. University Illinois, NCSA. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"LeBauer D, Kooper R (2025). PEcAn.settings: PEcAn Settings package. R package version 1.9.1, https://pecanproject.github.io.","code":"@Manual{,   title = {PEcAn.settings: PEcAn Settings package},   author = {David LeBauer and Rob Kooper},   year = {2025},   note = {R package version 1.9.1},   url = {https://pecanproject.github.io}, }"},{"path":"/index.html","id":"pecansettings","dir":"","previous_headings":"","what":"PEcAn Settings package","title":"PEcAn Settings package","text":"PEcAn Settings package","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PEcAn Settings package","text":"can install development version PEcAn.settings r-universe like : can install directly GitHub remotes package like :","code":"# Enable repository from pecanproject options(repos = c(   pecanproject = 'https://pecanproject.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) # Download and install PEcAn.settings in R install.packages('PEcAn.settings') library(remotes) install_github('pecanproject/pecan',  subdir = \"base/settings\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"PEcAn Settings package","text":"basic example shows solve common problem:","code":"library(PEcAn.settings) ## basic example code"},{"path":"/reference/MultiSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PEcAn MultiSettings object — MultiSettings","title":"Create a PEcAn MultiSettings object — MultiSettings","text":"Create PEcAn MultiSettings object","code":""},{"path":"/reference/MultiSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PEcAn MultiSettings object — MultiSettings","text":"","code":"MultiSettings(...)  as.MultiSettings(x)  is.MultiSettings(x)"},{"path":"/reference/MultiSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PEcAn MultiSettings object — MultiSettings","text":"... Settings objects concatenate x object test coerce","code":""},{"path":"/reference/MultiSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PEcAn MultiSettings object — MultiSettings","text":"list class \"Multisettings\"","code":""},{"path":"/reference/MultiSettings.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a PEcAn MultiSettings object — MultiSettings","text":".MultiSettings(): coerce existing object MultiSettings .MultiSettings(): test object MultiSettings","code":""},{"path":"/reference/MultiSettings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a PEcAn MultiSettings object — MultiSettings","text":"Ryan Kelly","code":""},{"path":"/reference/SafeList.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a SafeList object — SafeList","title":"Create a SafeList object — SafeList","text":"SafeList wrapper class normal R list. behave identically, except $ operator overridden require exact matches.","code":""},{"path":"/reference/SafeList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a SafeList object — SafeList","text":"","code":"SafeList(...)  as.SafeList(x)  is.SafeList(x)"},{"path":"/reference/SafeList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a SafeList object — SafeList","text":"... list upgrade SafeList, elements added new SafeList x list object tested coerced","code":""},{"path":"/reference/SafeList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a SafeList object — SafeList","text":"resulting SafeList SafeList version x logical","code":""},{"path":"/reference/SafeList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a SafeList object — SafeList","text":"constructor works identical list() unless: argument list, case result list, class attribute updated include 'SafeList', argument SafeList, case argument returned unchanged","code":""},{"path":"/reference/SafeList.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a SafeList object — SafeList","text":".SafeList(): Coerce object SafeList. .SafeList(): Test object already SafeList.","code":""},{"path":"/reference/SafeList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a SafeList object — SafeList","text":"Ryan Kelly","code":""},{"path":"/reference/Settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a PEcAn Settings object — Settings","title":"Create a PEcAn Settings object — Settings","text":"Create PEcAn Settings object","code":""},{"path":"/reference/Settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a PEcAn Settings object — Settings","text":"","code":"Settings(...)  as.Settings(x)  is.Settings(x)"},{"path":"/reference/Settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a PEcAn Settings object — Settings","text":"... objects concatenate x object test coerce","code":""},{"path":"/reference/Settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a PEcAn Settings object — Settings","text":"list containing objects ..., class c(\"Settings\", \"SafeList\", \"list\").","code":""},{"path":"/reference/Settings.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a PEcAn Settings object — Settings","text":".Settings(): coerce object Settings .Settings(): test object already Settings","code":""},{"path":"/reference/Settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a PEcAn Settings object — Settings","text":"Ryan Kelly","code":""},{"path":"/reference/addSecrets.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Users secrets — addSecrets","title":"Add Users secrets — addSecrets","text":"Add secret information ~/.pecan.xml","code":""},{"path":"/reference/addSecrets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Users secrets — addSecrets","text":"","code":"addSecrets(settings, force = FALSE)"},{"path":"/reference/addSecrets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Users secrets — addSecrets","text":"settings settings file force Logical: add secrets even added previously?","code":""},{"path":"/reference/addSecrets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Users secrets — addSecrets","text":"return updated settings values","code":""},{"path":"/reference/addSecrets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Users secrets — addSecrets","text":"Copies certains sections ~/.pecan.xml settings. allows user unique parameters also sharing pecan.xml file expose secrets. Currently copy database sections","code":""},{"path":"/reference/addSecrets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Users secrets — addSecrets","text":"Rob Kooper","code":""},{"path":"/reference/build_pathset.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct paths to a series of similarly-named files — build_pathset","title":"Construct paths to a series of similarly-named files — build_pathset","text":"Given template string set variables includes replicate ID, creates list paths matching template returns list ready insert PEcAn settings object.","code":""},{"path":"/reference/build_pathset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct paths to a series of similarly-named files — build_pathset","text":"","code":"build_pathset(n, glue_str = \"./file_{n}.nc\", ...)"},{"path":"/reference/build_pathset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct paths to a series of similarly-named files — build_pathset","text":"n vector replicate ids. given single numeric value, expanded 1:n glue_str Specification interpolate variables paths, glue::glue() input (see examples) ... variables interpolated path, length either 1 equal n.","code":""},{"path":"/reference/build_pathset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct paths to a series of similarly-named files — build_pathset","text":"list paths length n, names set path<n>, single path one ","code":""},{"path":"/reference/build_pathset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct paths to a series of similarly-named files — build_pathset","text":"motivating use case populating ensemble files (met$path, poolinitcond$path, etc) inside settings$run$site.<x>$inputs creating multi-site run configurations. can also helpful e.g. series yearly files, generally constructing set paths (1) names differing one variable, (2) inserted PEcAn settings object one block <path> entries:","code":"<path>   <path1>path/to/siteA/file.1.ext<\/path1>   <path2>path/to/siteA/file.2.ext<\/path2>   [...]   <path[n]>path/to/siteA/file.[n].ext<\/path[n]> <\/path>"},{"path":"/reference/build_pathset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct paths to a series of similarly-named files — build_pathset","text":"","code":"if (FALSE) { # \\dontrun{ build_pathset(3, \"IC/foo/IC_foo_{n}.nc\") build_pathset(n = 1:3, id = \"2ce800f4\", yr = 2003, \"ERA5/{id}/{yr}_{n}.clim\") } # }"},{"path":"/reference/cash-.SafeList.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract SafeList component by name — $.SafeList","title":"Extract SafeList component by name — $.SafeList","text":"Extract SafeList component name","code":""},{"path":"/reference/cash-.SafeList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract SafeList component by name — $.SafeList","text":"","code":"# S3 method for class 'SafeList' x$name"},{"path":"/reference/cash-.SafeList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract SafeList component by name — $.SafeList","text":"x SafeList object name name component","code":""},{"path":"/reference/cash-.SafeList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract SafeList component by name — $.SafeList","text":"specified component","code":""},{"path":"/reference/cash-.SafeList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract SafeList component by name — $.SafeList","text":"Overrides $.list, works just like except forces exact match (.e., makes x$name behave exactly like x[[name, exact=T]])","code":""},{"path":"/reference/cash-.SafeList.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract SafeList component by name — $.SafeList","text":"Ryan Kelly","code":""},{"path":"/reference/check.bety.version.html","id":null,"dir":"Reference","previous_headings":"","what":"Check BETY Version — check.bety.version","title":"Check BETY Version — check.bety.version","text":"check make sure BETY date","code":""},{"path":"/reference/check.bety.version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check BETY Version — check.bety.version","text":"","code":"check.bety.version(dbcon)"},{"path":"/reference/check.bety.version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check BETY Version — check.bety.version","text":"dbcon database connection object","code":""},{"path":"/reference/check.database.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Database — check.database","title":"Check Database — check.database","text":"Check Database","code":""},{"path":"/reference/check.database.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Database — check.database","text":"","code":"check.database(database)"},{"path":"/reference/check.database.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Database — check.database","text":"database settings list check. probably use settings$database","code":""},{"path":"/reference/check.database.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Database Settings — check.database.settings","title":"Check Database Settings — check.database.settings","text":"Check Database Settings","code":""},{"path":"/reference/check.database.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Database Settings — check.database.settings","text":"","code":"check.database.settings(settings)"},{"path":"/reference/check.database.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Database Settings — check.database.settings","text":"settings settings file","code":""},{"path":"/reference/check.ensemble.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check ensemble Settings — check.ensemble.settings","title":"Check ensemble Settings — check.ensemble.settings","text":"Check ensemble Settings","code":""},{"path":"/reference/check.ensemble.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check ensemble Settings — check.ensemble.settings","text":"","code":"check.ensemble.settings(settings)"},{"path":"/reference/check.ensemble.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check ensemble Settings — check.ensemble.settings","text":"settings settings file","code":""},{"path":"/reference/check.inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Inputs — check.inputs","title":"Check Inputs — check.inputs","text":"check see inputs specified - part model code","code":""},{"path":"/reference/check.inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Inputs — check.inputs","text":"","code":"check.inputs(settings)"},{"path":"/reference/check.inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Inputs — check.inputs","text":"settings settings file","code":""},{"path":"/reference/check.model.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Model Settings — check.model.settings","title":"Check Model Settings — check.model.settings","text":"Check Model Settings","code":""},{"path":"/reference/check.model.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Model Settings — check.model.settings","text":"","code":"check.model.settings(settings, dbcon = NULL)"},{"path":"/reference/check.model.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Model Settings — check.model.settings","text":"settings settings file dbcon database connection.","code":""},{"path":"/reference/check.run.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Run Settings — check.run.settings","title":"Check Run Settings — check.run.settings","text":"Check Run Settings","code":""},{"path":"/reference/check.run.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Run Settings — check.run.settings","text":"","code":"check.run.settings(settings, dbcon = NULL)"},{"path":"/reference/check.run.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Run Settings — check.run.settings","text":"settings settings file dbcon database connection.","code":""},{"path":"/reference/check.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Settings — check.settings","title":"Check Settings — check.settings","text":"Sanity checks. Checks settings file make sure expected fields exist. try use default values missing values, stop exection defaults possible.","code":""},{"path":"/reference/check.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Settings — check.settings","text":"","code":"check.settings(settings, force = FALSE)"},{"path":"/reference/check.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Settings — check.settings","text":"settings settings file force Logical: Rerun check even settings checked previously?","code":""},{"path":"/reference/check.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Settings — check.settings","text":"return updated settings values defaults set.","code":""},{"path":"/reference/check.settings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Settings — check.settings","text":"Expected fields settings file : pfts least one pft defined","code":""},{"path":"/reference/check.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Settings — check.settings","text":"Rob Kooper, David LeBauer","code":""},{"path":"/reference/check.workflow.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Workflow Settings — check.workflow.settings","title":"Check Workflow Settings — check.workflow.settings","text":"Check Workflow Settings","code":""},{"path":"/reference/check.workflow.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Workflow Settings — check.workflow.settings","text":"","code":"check.workflow.settings(settings, dbcon = NULL)"},{"path":"/reference/check.workflow.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Workflow Settings — check.workflow.settings","text":"settings settings file dbcon database connection","code":""},{"path":"/reference/clean.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleans PEcAn settings file — clean.settings","title":"Cleans PEcAn settings file — clean.settings","text":"try clean settings file ready new run. remove run specific information set outdir 'pecan' next run.","code":""},{"path":"/reference/clean.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleans PEcAn settings file — clean.settings","text":"","code":"clean.settings(inputfile = \"pecan.xml\", outputfile = \"pecan.xml\", write = TRUE)"},{"path":"/reference/clean.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleans PEcAn settings file — clean.settings","text":"inputfile PEcAn settings file used. outputfile name file settings written inside outputdir. write Indicates whether write modified settings file.","code":""},{"path":"/reference/clean.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleans PEcAn settings file — clean.settings","text":"list settings saved XML file(s)","code":""},{"path":"/reference/clean.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cleans PEcAn settings file — clean.settings","text":"Rob Kooper","code":""},{"path":"/reference/clean.settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleans PEcAn settings file — clean.settings","text":"","code":"if (FALSE) { # \\dontrun{ clean.settings('output/PEcAn_1/pecan.xml', 'pecan.xml') } # }"},{"path":"/reference/createMultiSiteSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"Create MultiSettings object containing (identical) run blocks multiple different sites","code":""},{"path":"/reference/createMultiSiteSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"","code":"createMultiSiteSettings(templateSettings, siteIds)"},{"path":"/reference/createMultiSiteSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"templateSettings Settings object template resulting MultiSettings. siteIds site IDs used resulting MultiSettings. May vector data frame mandatory id column optionally columns copied run$site. See details.","code":""},{"path":"/reference/createMultiSiteSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"MultiSettings object settings templateSettings replicated run$site blocks, one specified site ID.","code":""},{"path":"/reference/createMultiSiteSettings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"Starts template settings object, duplicates run$site block specified site ID. resulting MultiSettings thus identical input, except ready run site vector site IDs. siteIds data frame column named id, resulting run$site block contain site parameters (lat, lon, site name, etc) specified columns.","code":""},{"path":"/reference/createMultiSiteSettings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"Ryan Kelly","code":""},{"path":"/reference/createMultiSiteSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform Settings into multi-site MultiSettings — createMultiSiteSettings","text":"","code":"dontrun <- function() { # Added by Alexey Shiklomanov                         # so this doesn't run and break the build  # This isn't necessarily a fully working settings object. # Enough to get the idea though. # Note it has a $run block with settings that will be shared across all sites  template <- Settings(list(   info = structure(list(       notes = NULL, userid = \"1000000005\", username = \"Ryan Kelly\",       date = \"2016/07/13 13:23:46 -0400\"),     .Names = c(\"notes\", \"userid\", \"username\", \"date\")),   database = structure(list(       bety = structure(         list(user = \"bety\", password = \"bety\", host = \"psql-pecan.bu.edu\",           dbname = \"bety\", driver = \"PostgreSQL\", write = \"TRUE\"),         .Names = c(\"user\", \"password\", \"host\", \"dbname\", \"driver\", \"write\")),       fia = structure(         list(user = \"bety\", password = \"bety\", host = \"psql-pecan.bu.edu\",           dbname = \"fia5\", driver = \"PostgreSQL\", write = \"true\"),         .Names = c(\"user\", \"password\", \"host\", \"dbname\", \"driver\", \"write\"))),     .Names = c(\"bety\", \"fia\")),   pfts = structure(list(       pft = structure(         list(comment = NULL, name = \"temperate.Evergreen_Hardwood\",           constants = structure(list(num = \"1\"), .Names = \"num\")),         .Names = c(\"comment\", \"name\", \"constants\")),       pft = structure(         list(name = \"temperate.Hydric\",           constants = structure(list(num = \"2\"), .Names = \"num\")),         .Names = c(\"name\", \"constants\"))),     .Names = c(\"pft\", \"pft\")),   meta.analysis = structure(list(       iter = \"3000\", random.effects = list(on = FALSE, use_ghs = TRUE),       update = \"AUTO\", threshold = \"1.2\"),     .Names = c(\"iter\", \"random.effects\", \"update\", \"threshold\")),   ensemble = structure(list(size = \"1\", variable = \"NPP\"),     .Names = c(\"size\", \"variable\")),   model = structure(list(id = \"2000000005\",       edin = \"/home/rykelly/pecan/RK_files/ED2IN/ED2IN.rgit.mandifore_04\",       config.header = structure(list(           radiation = structure(list(lai_min = \"0.01\"), .Names = \"lai_min\"),           ed_misc = structure(list(output_month = \"12\"),             .Names = \"output_month\")),         .Names = c(\"radiation\", \"ed_misc\")),       phenol.scheme = \"0\", prerun = \"module load hdf5/1.8.11\",       binary = \"/usr2/postdoc/rykelly/ED2/ED/build/ed_2.1-opt\"),     .Names = c(\"id\", \"edin\", \"config.header\", \"phenol.scheme\", \"prerun\",       \"binary\")),   host = structure(list(name = \"geo.bu.edu\", user = \"rykelly\",       folder = \"/projectnb/dietzelab/pecan.data/output/rykelly\",       qsub = \"qsub -V -N @NAME@ -o @STDOUT@ -e @STDERR@ -S /bin/bash\",       qsub.jobid = \"Your job ([0-9]+) .*\",       qstat = \"qstat -j @JOBID@ || echo DONE\",       prerun = \"module load udunits R/R-3.0.0_gnu-4.4.6\",       dbfiles = \"/projectnb/dietzelab/pecan.data/input\",       modellauncher = structure(list(           binary = \"/usr2/postdoc/rykelly/pecan/utils/modellauncher/modellauncher\",           qsub.extra = \"-pe omp 20\"),         .Names = c(\"binary\", \"qsub.extra\"))),     .Names = c(\"name\", \"user\", \"folder\", \"qsub\", \"qsub.jobid\", \"qstat\",       \"prerun\", \"dbfiles\", \"modellauncher\")),   run = structure(list(       inputs = structure(list(           met = structure(list(source = \"NARR\", output = \"ED2\"),             .Names = c(\"source\", \"output\")),           lu = structure(list(id = \"294\",               path = \"/projectnb/dietzelab/EDI/ed_inputs/glu/\"),             .Names = c(\"id\", \"path\")),           soil = structure(list(id = \"297\",               path = \"/projectnb/dietzelab/EDI/faoOLD/FAO_\"),             .Names = c(\"id\", \"path\")),           thsum = structure(list(id = \"295\",               path = \"/projectnb/dietzelab/EDI/ed_inputs/\"),             .Names = c(\"id\", \"path\")),           veg = structure(list(id = \"296\",               path = \"/projectnb/dietzelab/EDI/oge2OLD/OGE2_\"),             .Names = c(\"id\", \"path\")),           pss = structure(list(source = \"FIA\"), .Names = \"source\")),         .Names = c(\"met\", \"lu\", \"soil\", \"thsum\", \"veg\", \"pss\")),       start.date = \"2004/01/01\",       end.date = \"2004/01/31\"),     .Names = c(\"inputs\", \"start.date\", \"end.date\")) ))   sitegroupId <- 1000000002 startDate <- \"2000/01/01\" endDate <- \"2015/12/31\" nSite <- 10 outDir <- \"~/multisite_setup_test\"   template <- setDates(template, startDate = startDate, endDate = endDate) template <- setOutDir(template, outDir)  multiRunSettings <- createSitegroupMultiSettings(     template,     sitegroupId = sitegroupId,     nSite = nSite)  dir.create(outDir, showWarnings = FALSE) write.settings(multiRunSettings, outputfile = \"pecan.xml\")  } # dontrun"},{"path":"/reference/createSitegroupMultiSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"Helps create MultiSettings object run sites Sitegroup.","code":""},{"path":"/reference/createSitegroupMultiSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"","code":"createSitegroupMultiSettings(   templateSettings,   sitegroupId,   nSite,   con = NULL,   params = templateSettings$database$bety )"},{"path":"/reference/createSitegroupMultiSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"templateSettings Settings object template resulting MultiSettings. sitegroupId Bety ID sitegroup draw nSite number sites randomly select (without replacement) siteGroup. Omit use sites group. con, params Bety DB connection parameters. Passed directly db.query","code":""},{"path":"/reference/createSitegroupMultiSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"MultiSettings object settings templateSettings site information selected sites","code":""},{"path":"/reference/createSitegroupMultiSettings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"Starts template settings object, fills run block site info sampled sitegroup. template fully set except site info, less empty plan fill settings later. MultiSettings created templateSettings, nSite sites (, nSite unset) selected Bety, info dropped MultiSettings.","code":""},{"path":"/reference/createSitegroupMultiSettings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"Ryan Kelly","code":""},{"path":"/reference/createSitegroupMultiSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Sitegroup MultiSettings — createSitegroupMultiSettings","text":"","code":"dontrun <- function() { # Added by Alexey Shiklomanov                         # so this doesn't run and break the build  # This isn't necessarily a fully working settings object. # Enough to get the idea though. # Note it has a $run block with settings that will be shared across all sites  template <- Settings(list(   info = structure(list(       notes = NULL, userid = \"1000000005\", username = \"Ryan Kelly\",       date = \"2016/07/13 13:23:46 -0400\"),     .Names = c(\"notes\", \"userid\", \"username\", \"date\")),   database = structure(list(       bety = structure(         list(user = \"bety\", password = \"bety\", host = \"psql-pecan.bu.edu\",           dbname = \"bety\", driver = \"PostgreSQL\", write = \"TRUE\"),         .Names = c(\"user\", \"password\", \"host\", \"dbname\", \"driver\", \"write\")),       fia = structure(         list(user = \"bety\", password = \"bety\", host = \"psql-pecan.bu.edu\",           dbname = \"fia5\", driver = \"PostgreSQL\", write = \"true\"),         .Names = c(\"user\", \"password\", \"host\", \"dbname\", \"driver\", \"write\"))),     .Names = c(\"bety\", \"fia\")),   pfts = structure(list(       pft = structure(         list(comment = NULL, name = \"temperate.Evergreen_Hardwood\",           constants = structure(list(num = \"1\"), .Names = \"num\")),         .Names = c(\"comment\", \"name\", \"constants\")),       pft = structure(         list(name = \"temperate.Hydric\",           constants = structure(list(num = \"2\"), .Names = \"num\")),         .Names = c(\"name\", \"constants\"))),     .Names = c(\"pft\", \"pft\")),   meta.analysis = structure(list(       iter = \"3000\", random.effects = list(on = FALSE, use_ghs = TRUE),       update = \"AUTO\", threshold = \"1.2\"),     .Names = c(\"iter\", \"random.effects\", \"update\", \"threshold\")),   ensemble = structure(list(size = \"1\", variable = \"NPP\"),     .Names = c(\"size\", \"variable\")),   model = structure(list(id = \"2000000005\",       edin = \"/home/rykelly/pecan/RK_files/ED2IN/ED2IN.rgit.mandifore_04\",       config.header = structure(list(           radiation = structure(list(lai_min = \"0.01\"), .Names = \"lai_min\"),           ed_misc = structure(list(output_month = \"12\"),             .Names = \"output_month\")),         .Names = c(\"radiation\", \"ed_misc\")),       phenol.scheme = \"0\", prerun = \"module load hdf5/1.8.11\",       binary = \"/usr2/postdoc/rykelly/ED2/ED/build/ed_2.1-opt\"),     .Names = c(\"id\", \"edin\", \"config.header\", \"phenol.scheme\", \"prerun\",       \"binary\")),   host = structure(list(name = \"geo.bu.edu\", user = \"rykelly\",       folder = \"/projectnb/dietzelab/pecan.data/output/rykelly\",       qsub = \"qsub -V -N @NAME@ -o @STDOUT@ -e @STDERR@ -S /bin/bash\",       qsub.jobid = \"Your job ([0-9]+) .*\",       qstat = \"qstat -j @JOBID@ || echo DONE\",       prerun = \"module load udunits R/R-3.0.0_gnu-4.4.6\",       dbfiles = \"/projectnb/dietzelab/pecan.data/input\",       modellauncher = structure(list(           binary = \"/usr2/postdoc/rykelly/pecan/utils/modellauncher/modellauncher\",           qsub.extra = \"-pe omp 20\"),         .Names = c(\"binary\", \"qsub.extra\"))),     .Names = c(\"name\", \"user\", \"folder\", \"qsub\", \"qsub.jobid\", \"qstat\",       \"prerun\", \"dbfiles\", \"modellauncher\")),   run = structure(list(       inputs = structure(list(           met = structure(list(source = \"NARR\", output = \"ED2\"),             .Names = c(\"source\", \"output\")),           lu = structure(list(id = \"294\",               path = \"/projectnb/dietzelab/EDI/ed_inputs/glu/\"),             .Names = c(\"id\", \"path\")),           soil = structure(list(id = \"297\",               path = \"/projectnb/dietzelab/EDI/faoOLD/FAO_\"),             .Names = c(\"id\", \"path\")),           thsum = structure(list(id = \"295\",               path = \"/projectnb/dietzelab/EDI/ed_inputs/\"),             .Names = c(\"id\", \"path\")),           veg = structure(list(id = \"296\",               path = \"/projectnb/dietzelab/EDI/oge2OLD/OGE2_\"),             .Names = c(\"id\", \"path\")),           pss = structure(list(source = \"FIA\"), .Names = \"source\")),         .Names = c(\"met\", \"lu\", \"soil\", \"thsum\", \"veg\", \"pss\")),       start.date = \"2004/01/01\",       end.date = \"2004/01/31\"),     .Names = c(\"inputs\", \"start.date\", \"end.date\")) ))   sitegroupId <- 1000000002 startDate <- \"2000/01/01\" endDate <- \"2015/12/31\" nSite <- 10 outDir <- \"~/multisite_setup_test\"   template <- setDates(template, startDate = startDate, endDate = endDate) template <- setOutDir(template, outDir)  multiRunSettings <- createSitegroupMultiSettings(     template,     sitegroupId = sitegroupId,     nSite = nSite)  dir.create(outDir, showWarnings = FALSE) write.settings(multiRunSettings, outputfile = \"pecan.xml\")  } # dontrun"},{"path":"/reference/expandMultiSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"generic function for expanding multi-settings. — expandMultiSettings","title":"generic function for expanding multi-settings. — expandMultiSettings","text":"generic function expanding multi-settings.","code":""},{"path":"/reference/expandMultiSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generic function for expanding multi-settings. — expandMultiSettings","text":"","code":"expandMultiSettings(x)"},{"path":"/reference/expandMultiSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generic function for expanding multi-settings. — expandMultiSettings","text":"x object expanded.","code":""},{"path":"/reference/fix.deprecated.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix Deprecated Settings — fix.deprecated.settings","title":"Fix Deprecated Settings — fix.deprecated.settings","text":"Checks attempts fix deprecated settings structure","code":""},{"path":"/reference/fix.deprecated.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix Deprecated Settings — fix.deprecated.settings","text":"","code":"fix.deprecated.settings(settings, force = FALSE)"},{"path":"/reference/fix.deprecated.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix Deprecated Settings — fix.deprecated.settings","text":"settings settings list force Logical: re-run fixing deprecated settings even done previously?","code":""},{"path":"/reference/fix.deprecated.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix Deprecated Settings — fix.deprecated.settings","text":"updated settings list","code":""},{"path":"/reference/fix.deprecated.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fix Deprecated Settings — fix.deprecated.settings","text":"Ryan Kelly","code":""},{"path":"/reference/getRunSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Build run MultiSettings for a single site id — getRunSettings","title":"Build run MultiSettings for a single site id — getRunSettings","text":"Processes one site siteIds argument createMultiSiteSettings. probably need call directly.","code":""},{"path":"/reference/getRunSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build run MultiSettings for a single site id — getRunSettings","text":"","code":"getRunSettings(templateSettings, siteId)"},{"path":"/reference/getRunSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build run MultiSettings for a single site id — getRunSettings","text":"templateSettings Settings object template resulting MultiSettings. siteId site process. See createMultiSiteSettings","code":""},{"path":"/reference/get_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Args — get_args","title":"Get Args — get_args","text":"Used web/workflow.R parse command line arguments. See also https://github.com/PecanProject/pecan/pull/2626.","code":""},{"path":"/reference/get_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Args — get_args","text":"","code":"get_args()"},{"path":"/reference/get_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Args — get_args","text":"list generated parse_args; see details.","code":""},{"path":"/reference/get_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Args — get_args","text":"","code":"if (FALSE) ./web/workflow.R -h # \\dontrun{}"},{"path":"/reference/listToXml.default.html","id":null,"dir":"Reference","previous_headings":"","what":"List to XML — listToXml.default","title":"List to XML — listToXml.default","text":"Convert List XML","code":""},{"path":"/reference/listToXml.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List to XML — listToXml.default","text":"","code":"# Default S3 method listToXml(x, tag = \"pecan\", ...)"},{"path":"/reference/listToXml.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List to XML — listToXml.default","text":"x object converted. Despite function name, need actually list tag name use root tag resulting XML tree ... arguments, currently ignored","code":""},{"path":"/reference/listToXml.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List to XML — listToXml.default","text":"xmlNode","code":""},{"path":"/reference/listToXml.default.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List to XML — listToXml.default","text":"Can convert list object xml object using xmlNode","code":""},{"path":"/reference/listToXml.default.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List to XML — listToXml.default","text":"David LeBauer, Carl Davidson, Rob Kooper","code":""},{"path":"/reference/listToXml.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic function to convert list to XML — listToXml","title":"A generic function to convert list to XML — listToXml","text":"generic function convert list XML","code":""},{"path":"/reference/listToXml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic function to convert list to XML — listToXml","text":"","code":"listToXml(x, ...)"},{"path":"/reference/listToXml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generic function to convert list to XML — listToXml","text":"x list converted ... arguments passed methods","code":""},{"path":"/reference/loadPath.sitePFT.html","id":null,"dir":"Reference","previous_headings":"","what":"Title loadPath.sitePFT — loadPath.sitePFT","title":"Title loadPath.sitePFT — loadPath.sitePFT","text":"csv text file needs header separated using comma. first column text file, one needs specify site id second column name PFT.","code":""},{"path":"/reference/loadPath.sitePFT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title loadPath.sitePFT — loadPath.sitePFT","text":"","code":"loadPath.sitePFT(settings, Path)"},{"path":"/reference/loadPath.sitePFT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title loadPath.sitePFT — loadPath.sitePFT","text":"settings pecan setting list. Path Character file name extension. path generated using outdir tag pecan settings.","code":""},{"path":"/reference/loadPath.sitePFT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title loadPath.sitePFT — loadPath.sitePFT","text":"dataframe two columns site pft","code":""},{"path":"/reference/papply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply functions to PEcAn MultiSettings — papply","title":"Apply functions to PEcAn MultiSettings — papply","text":"Works like lapply(), PEcAn Settings MultiSettings objects","code":""},{"path":"/reference/papply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply functions to PEcAn MultiSettings — papply","text":"","code":"papply(settings, fn, ..., stop.on.error = FALSE)"},{"path":"/reference/papply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply functions to PEcAn MultiSettings — papply","text":"settings MultiSettings, Settings, list operate fn function apply settings ... additional arguments fn stop..error Whether halt execution single element settings results error. See Details.","code":""},{"path":"/reference/papply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply functions to PEcAn MultiSettings — papply","text":"single fn return value, list values (coerced MultiSettings appropriate; see Details)","code":""},{"path":"/reference/papply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply functions to PEcAn MultiSettings — papply","text":"papply mainly used call function Settings object MultiSettings object, returning results list. additional features, however: result fn Settings object, papply coerce returned list new MultiSettings. settings Settings object, papply knows call fn directly. settings generic list, papply coerces Settings object calls fn directly. meant backwards compatibility old-fashioned PEcAn settings lists, unintended consequences default, papply proceed even fn throws error one elements settings. Note option used, returned results list entries elements result error.","code":""},{"path":"/reference/papply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply functions to PEcAn MultiSettings — papply","text":"Ryan Kelly","code":""},{"path":"/reference/papply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply functions to PEcAn MultiSettings — papply","text":"","code":"f = function(settings, ...) {   # Here's how I envisioned a typical use case within a standard PEcAn function   if(is.MultiSettings(settings)) {     return(papply(settings, f, ...))   }      # Don't worry about the beolow, it's just some guts to make the function do something we can see   l <- list(...)   for(i in seq_along(l)) {     ind <- length(settings) + 1     settings[[ind]] <- l[[i]]     if(!is.null(names(l))) {       names(settings)[ind] <- names(l)[i]     }   }   return(settings) }  # Example settings1 <- Settings(list(a=\"aa\", b=1:3, c=\"NA\")) settings2 <- Settings(list(a=\"A\", b=4:5, c=paste)) multiSettings <- MultiSettings(settings1, settings2)  # The fucntion should add element $d = D to either a Settings, or each entry in a MultiSettings f(settings1, d=\"D\") #> $a #> [1] \"aa\" #>  #> $b #> [1] 1 2 3 #>  #> $c #> [1] \"NA\" #>  #> $d #> [1] \"D\" #>  #> attr(,\"class\") #> [1] \"Settings\" \"SafeList\" \"list\"     print(f(multiSettings, d=\"D\"), TRUE) #> $settings.1 #> $a #> [1] \"aa\" #>  #> $b #> [1] 1 2 3 #>  #> $c #> [1] \"NA\" #>  #> $d #> [1] \"D\" #>  #> attr(,\"class\") #> [1] \"Settings\" \"SafeList\" \"list\"     #>  #> $settings.2 #> $a #> [1] \"A\" #>  #> $b #> [1] 4 5 #>  #> $c #> function (..., sep = \" \", collapse = NULL, recycle0 = FALSE)  #> .Internal(paste(list(...), sep, collapse, recycle0)) #> <bytecode: 0x563537570f78> #> <environment: namespace:base> #>  #> $d #> [1] \"D\" #>  #> attr(,\"class\") #> [1] \"Settings\" \"SafeList\" \"list\"     #>  #> attr(,\"class\") #> [1] \"MultiSettings\" \"list\""},{"path":"/reference/prepare.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Settings — prepare.settings","title":"Prepare Settings — prepare.settings","text":"Update, set defaults , otherwise prepare PEcAn Settings object","code":""},{"path":"/reference/prepare.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Settings — prepare.settings","text":"","code":"prepare.settings(settings, force = FALSE)"},{"path":"/reference/prepare.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Settings — prepare.settings","text":"settings settings list force Whether force function run even determines run settings already.","code":""},{"path":"/reference/prepare.settings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Settings — prepare.settings","text":"Performs various checks, fixes deprecated contructs, assigns missing values possible.","code":""},{"path":"/reference/prepare.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare Settings — prepare.settings","text":"Ryan Kelly Betsy Cowdery","code":""},{"path":"/reference/printAll.html","id":null,"dir":"Reference","previous_headings":"","what":"generic function for printing contents of objects. — printAll","title":"generic function for printing contents of objects. — printAll","text":"generic function printing contents objects.","code":""},{"path":"/reference/printAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generic function for printing contents of objects. — printAll","text":"","code":"printAll(x)"},{"path":"/reference/printAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generic function for printing contents of objects. — printAll","text":"x object printed.","code":""},{"path":"/reference/read.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads PEcAn settings file — read.settings","title":"Loads PEcAn settings file — read.settings","text":"try find PEcAn settings file following order: --settings <file> passed command line argument using --settings inputfile passed argument function PECAN_SETTINGS environment variable PECAN_SETTINGS pointing specific file ./pecan.xml pecan.xml current folder","code":""},{"path":"/reference/read.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads PEcAn settings file — read.settings","text":"","code":"read.settings(inputfile = \"pecan.xml\")"},{"path":"/reference/read.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads PEcAn settings file — read.settings","text":"inputfile PEcAn settings file used.","code":""},{"path":"/reference/read.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads PEcAn settings file — read.settings","text":"list settings loaded XML file(s)","code":""},{"path":"/reference/read.settings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Loads PEcAn settings file — read.settings","text":"function finds valid file, look . Thus, inputfile supplied, PECAN_SETTINGS ignored. Even file argument passed, ignored file passed higher priority method.","code":""},{"path":"/reference/read.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Loads PEcAn settings file — read.settings","text":"Shawn Serbin Rob Kooper David LeBauer Ryan Kelly Betsy Cowdery","code":""},{"path":[]},{"path":"/reference/setDates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Dates of PEcAn Settings — setDates","title":"Set the Dates of PEcAn Settings — setDates","text":"Sets run, ensemble, sensitivity analysis dates PEcAn Settings","code":""},{"path":"/reference/setDates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Dates of PEcAn Settings — setDates","text":"","code":"setDates(settings, startDate, endDate)"},{"path":"/reference/setDates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Dates of PEcAn Settings — setDates","text":"settings Settings object startDate, endDate desired start end dates","code":""},{"path":"/reference/setDates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Dates of PEcAn Settings — setDates","text":"original Settings object updated dates","code":""},{"path":"/reference/setDates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the Dates of PEcAn Settings — setDates","text":"Sets start/end dates settings$run specified dates, sets corresponding years settings$ensemble settings$sensitivity.analysis. Either date can omitted leave unchanged.","code":""},{"path":"/reference/setDates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Dates of PEcAn Settings — setDates","text":"Ryan Kelly","code":""},{"path":"/reference/setEnsemblePaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","title":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","text":"Propagates filename pattern relevant paths multi-site settings. example files named like \"mymet/siteA/scenario1.nc\" \"mymet/siteZ/scenario50.nc\", setEnsemblePaths(settings, n_reps = 50, \"mymet/{id}/scenario{n}.nc\") add settings one shot.","code":""},{"path":"/reference/setEnsemblePaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","text":"","code":"setEnsemblePaths(   settings,   n_reps,   input_type = \"met\",   path_template = \"./{id}/{n}.nc\",   ... )"},{"path":"/reference/setEnsemblePaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","text":"settings PEcAn MultiSettings object n_reps number replicates insert path. input_type subsection inputs settings edited path_template format paths inserted, glue string. ... additional variables interpolated path_template","code":""},{"path":"/reference/setEnsemblePaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","text":"updated settings object","code":""},{"path":"/reference/setEnsemblePaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","text":"Operates one input section (met, poolinitcond, etc) time common different path conventions met vs IC. path template string recognized glue::glue(), curly braces wrapping expressions interpolated. {n} replaced value 1:n_reps, {id} replaced siteid site, variables need passed named arguments .... inputs$<input_type> exist, created path element matches requested pattern. exist, existing path element overwritten.","code":""},{"path":"/reference/setEnsemblePaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set paths to input file ensembles using a consistent pattern across sites — setEnsemblePaths","text":"","code":"s <- as.Settings(list(   run = list(     start.date = \"TBD\",     site = list(),     inputs = list(       met = list(),       poolinitcond = list()     )   ) )) m <- createMultiSiteSettings(s, c(\"a1\", \"b2\")) m1 <- setEnsemblePaths(m, 2) m1$run$site.a1$inputs #> $met #> $met$path #> $met$path$path1 #> [1] \"./a1/1.nc\" #>  #> $met$path$path2 #> [1] \"./a1/2.nc\" #>  #>  #>  #> $poolinitcond #> list() #>  m2 <- setEnsemblePaths(   m, 2, \"poolinitcond\",   icdir = \"some/long/path\",   path_template = \"{icdir}/{id}/{n}.nc\" ) m2$run$site.a1$inputs #> $met #> list() #>  #> $poolinitcond #> $poolinitcond$path #> $poolinitcond$path$path1 #> [1] \"some/long/path/a1/1.nc\" #>  #> $poolinitcond$path$path2 #> [1] \"some/long/path/a1/2.nc\" #>  #>  #>"},{"path":"/reference/setOutDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the Output Directories of PEcAn Settings — setOutDir","title":"Set the Output Directories of PEcAn Settings — setOutDir","text":"Sets main output directory nulls others","code":""},{"path":"/reference/setOutDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the Output Directories of PEcAn Settings — setOutDir","text":"","code":"setOutDir(settings, outDir)"},{"path":"/reference/setOutDir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the Output Directories of PEcAn Settings — setOutDir","text":"settings Settings object outDir desired output directory","code":""},{"path":"/reference/setOutDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the Output Directories of PEcAn Settings — setOutDir","text":"original Settings object updated output directories","code":""},{"path":"/reference/setOutDir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the Output Directories of PEcAn Settings — setOutDir","text":"Sets main output directory (settings$outdir) outDir, sets numerous others (settings$modeloutdir, settings$host$rundir, settings$host$outdir, settings$host$modeloutdir) NULL revert defaults check.settings run.","code":""},{"path":"/reference/setOutDir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the Output Directories of PEcAn Settings — setOutDir","text":"Ryan Kelly","code":""},{"path":"/reference/settingNames.html","id":null,"dir":"Reference","previous_headings":"","what":"function that can retrieve or update the names of multi-settings. — settingNames","title":"function that can retrieve or update the names of multi-settings. — settingNames","text":"function can retrieve update names multi-settings.","code":""},{"path":"/reference/settingNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function that can retrieve or update the names of multi-settings. — settingNames","text":"","code":"settingNames(multiSettings, settingNames)"},{"path":"/reference/settingNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function that can retrieve or update the names of multi-settings. — settingNames","text":"multiSettings object retrieve set names. settingNames names set multi-settings object.","code":""},{"path":"/reference/site.pft.link.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"site.pft.link.settings — site.pft.link.settings","title":"site.pft.link.settings — site.pft.link.settings","text":"function reads pecan setting check pft.site xml tag run>inputs. path ID input defined , used linking sites pfts.","code":""},{"path":"/reference/site.pft.link.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"site.pft.link.settings — site.pft.link.settings","text":"","code":"site.pft.link.settings(settings)"},{"path":"/reference/site.pft.link.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"site.pft.link.settings — site.pft.link.settings","text":"settings settings list","code":""},{"path":"/reference/site.pft.link.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"site.pft.link.settings — site.pft.link.settings","text":"pecan xml setting file","code":""},{"path":"/reference/site.pft.linkage.html","id":null,"dir":"Reference","previous_headings":"","what":"site.pft.linkage — site.pft.linkage","title":"site.pft.linkage — site.pft.linkage","text":"function creates required tags inside pecan.xml link sites pfts given look table. required tags already defined pecan xml updated. multiple pfts need used site, pft needs separate row lookup table, resulting multiple rows site.","code":""},{"path":"/reference/site.pft.linkage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"site.pft.linkage — site.pft.linkage","text":"","code":"site.pft.linkage(settings, site.pft.links)"},{"path":"/reference/site.pft.linkage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"site.pft.linkage — site.pft.linkage","text":"settings pecan settings list. site.pft.links dataframe. look table two columns site pft site ids site column pft names pft column.","code":""},{"path":"/reference/site.pft.linkage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"site.pft.linkage — site.pft.linkage","text":"pecan setting list","code":""},{"path":"/reference/site.pft.linkage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"site.pft.linkage — site.pft.linkage","text":"","code":"if (FALSE) { # \\dontrun{ #setting up the Look up tables site.pft.links <-tribble(  ~site, ~pft,  \"1000025731\", \"temperate.broadleaf.deciduous1\",  \"1000025731\", \"temperate.needleleaf.evergreen\",  \"1000000048\", \"temperate.broadleaf.deciduous2\",  \"772\", \"temperate.broadleaf.deciduous3\",  \"763\", \"temperate.broadleaf.deciduous4\" )  # sending a multi- setting xml file to the function site.pft.linkage(settings,site.pft.links) } # }"},{"path":"/reference/update.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Settings — update.settings","title":"Update Settings — update.settings","text":"Updates pecan.xml file match new layout. take care conversion latest pecan.xml file.","code":""},{"path":"/reference/update.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Settings — update.settings","text":"","code":"# S3 method for class 'settings' update(settings, force = FALSE)"},{"path":"/reference/update.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Settings — update.settings","text":"settings settings file force Logical: update even settings previously updated?.","code":""},{"path":"/reference/update.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Settings — update.settings","text":"return updated settings values","code":""},{"path":"/reference/update.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update Settings — update.settings","text":"Rob Kooper","code":""},{"path":"/reference/write.settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a settings object as XML — write.settings","title":"Write a settings object as XML — write.settings","text":"outputdir NULL, whole path taken outputfile. outputfile outputdir NULL, file written returns formatted XML character. can handy debugging.","code":""},{"path":"/reference/write.settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a settings object as XML — write.settings","text":"","code":"write.settings(settings, outputfile, outputdir = settings$outdir)"},{"path":"/reference/write.settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a settings object as XML — write.settings","text":"settings settings list outputfile file name write outputdir directory write ","code":""},{"path":"/reference/write.settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a settings object as XML — write.settings","text":"path written XML file, settings XML string outputfile NULL","code":""},{"path":"/reference/write.settings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write a settings object as XML — write.settings","text":"Ryan Kelly Betsy Cowdery","code":""},{"path":[]},{"path":"/news/index.html","id":"fixed-1-9-1","dir":"Changelog","previous_headings":"","what":"Fixed","title":"PEcAn.settings 1.9.1","text":"listToXml.MultiSettings now produces valid XML MultiSettings length 1. setEnsemblePaths longer wraps single paths list, giving <path>//file.<\/path> instead previous <path><path1>//file.<\/path1><\/path>.","code":""},{"path":"/news/index.html","id":"changed-1-9-1","dir":"Changelog","previous_headings":"","what":"Changed","title":"PEcAn.settings 1.9.1","text":"tag argument listToXml() now optional default “pecan” specified. sets name root tag resulting XML object. first argument listToXml.MultiSettings() renamed item x, now accepts ignores ..., consistency generic.","code":""},{"path":[]},{"path":"/news/index.html","id":"changed-1-9-0","dir":"Changelog","previous_headings":"","what":"Changed","title":"PEcAn.settings 1.9.0","text":"PEcAn.settings now distributed BSD 3-clause license instead NCSA Open Source license. createMultiSiteSettings now names site’s block settings$run site.[siteid] easier subsetting (settings.[n]). write.settings now return formatted XML string (write file) called outputfile = NULL, consistency XML::saveXML convenience debugging.","code":""},{"path":"/news/index.html","id":"added-1-9-0","dir":"Changelog","previous_headings":"","what":"Added","title":"PEcAn.settings 1.9.0","text":"createMultiSiteSettings argument siteIds now accepts data frames well previously accepted numeric character vectors. data frame one site per row, uniquely identified mandatory id column. columns row become fields resulting settings$run$site block. New function setEnsemblePaths inserts paths ensemble inputs (met, poolinitcond, etc) every site’s inputs block according filename pattern specified template string.","code":""},{"path":"/news/index.html","id":"fixed-1-9-0","dir":"Changelog","previous_headings":"","what":"Fixed","title":"PEcAn.settings 1.9.0","text":"Reading multi-settings XML now keeps site bock names specified file instead defaulting settings.[n].","code":""},{"path":"/news/index.html","id":"removed-1-9-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"PEcAn.settings 1.9.0","text":"Internal helper function getRunSettings longer exported. documentation long noted, intended called directly.","code":""},{"path":"/news/index.html","id":"pecansettings-180","dir":"Changelog","previous_headings":"","what":"PEcAn.settings 1.8.0","title":"PEcAn.settings 1.8.0","text":"Bug fixes ensemble runs.","code":""},{"path":"/news/index.html","id":"pecansettings-171","dir":"Changelog","previous_headings":"","what":"PEcAn.settings 1.7.1","title":"PEcAn.settings 1.7.1","text":"changes 1.7.1 earlier recorded single file PEcAn packages; please see https://github.com/PecanProject/pecan/blob/v1.7.1/CHANGELOG.md details.","code":""}]
