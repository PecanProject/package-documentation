[{"path":"/articles/ResponseCurves.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"package designed fit Farquhar, von Caemmerer, Berry (1980) photosynthesis model [FvCB model] leaf-level photosynthetic data. statistical model generalizes Hierarchial Bayesian approach described Feng Dietze (2013). important advance approach provides ability include covariates (e.g. leaf traits) mixed effects model describing key model parameters, α\\alpha VcmaxV_\\textrm{cmax}. moment supported random effect leaf-level effect, however fixed effects can specified using standard R linear model notation, including interaction terms. package includes functions : loading photosynthetic data common LI-COR text-based format, performing visual QA/QC data, fitting model data, generating diagnostic response-curve plots confidence predictive intervals. diagnostic QA/QC functions assume data collected CO2 light response curves (-Ci -Q respectively). assumption required model fitting, alternative sampling designs allowed, described Dietze (2014). version FvCB model used described , moment include TPU limitation term temperature corrections (.e. data assumed collected leaf temperature, parameters specific temperature). also assumes electron transport rate, J, saturating function JmaxJ_{\\textrm{max}}. Aj=αQ1+(α2Q2)/(Jmax2)Ci−Γ4Ci+8ΓA_j = \\frac{\\alpha Q}{\\sqrt{1+(\\alpha^2 Q^2)/(J_\\textrm{max}^2)}} \\frac{C_i- \\Gamma}{4 C_i + 8 \\Gamma} Ac=VcmaxCi−ΓCi+KC(1+[O]/KO)A_c = V_{\\textrm{cmax}} \\frac{C_i - \\Gamma}{C_i+ K_C (1+[O]/K_O) } (m)=min(Aj,Ac)−rA^{(m)} = min(A_j,A_c) - r (o)∼N((m),τ)^{(o)} \\sim N(^{(m)},\\tau) ‘Parameter’ refers variable referenced code, thus name returned statistical fit. hierarchical version model equivalent standard model except α\\alpha VcmaxV_\\textrm{cmax} mixed effect linear models covariates specified. linear models assume uninformative Normal priors, random effects residual errors assumed Gamma priors precisions. priors described example code. FvCB model fit using JAGS via rjags package outputs coda mcmc.list objects can assessed manipulated using standard tools coda package.","code":""},{"path":"/articles/ResponseCurves.html","id":"install-package-from-github","dir":"Articles","previous_headings":"","what":"Install package from Github","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"PEcAn installed, skip – PEcAn.photosynthesis already installed! install PEcAn.photosynthesis package, separately rest PEcAn, run following R: .","code":"remotes::install_github(\"PecanProject/pecan/modules/photosynthesis\")"},{"path":"/articles/ResponseCurves.html","id":"load-library-and-example-data","dir":"Articles","previous_headings":"","what":"Load library and example data","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"example using set files built package, easily replace filenames vector filenames, example using list.files look files directory","code":"library(PEcAn.photosynthesis) ## Loading required package: rjags ## Loading required package: coda ## Linked to JAGS 4.3.2 ## Loaded modules: basemod,bugs ## Get list of LI-COR 6400 file names (ASCII not xls) filenames <- system.file(\"extdata\", paste0(\"flux-course-\",rep(1:6,each=2),c(\"aci\",\"aq\")), package = \"PEcAn.photosynthesis\")  ## Load files to a list master = lapply(filenames, read_Licor) ## [1] \"flux-course-1aci\" ## [1] \"flux-course-1aq\" ## [1] \"flux-course-2aci\" ## [1] \"flux-course-2aq\" ## [1] \"flux-course-3aci\" ## [1] \"flux-course-3aq\" ## [1] \"flux-course-4aci\" ## [1] \"flux-course-4aq\" ## [1] \"flux-course-5aci\" ## [1] \"flux-course-5aq\" ## [1] \"flux-course-6aci\" ## [1] \"flux-course-6aq\""},{"path":"/articles/ResponseCurves.html","id":"run-qaqc-checks","dir":"Articles","previous_headings":"","what":"run QA/QC checks","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"code performs set interactive QA/QC checks LI-COR data ’s loaded. ’s interactive isn’t run vignette knit. want get feel code works ’ll want run first just one file, rather looping files first screen shown -Ci curve. Click points outliers want remove. aware points change color SCREEN, updated next. Also aware data set -Ci curve (contains -Ci -Q curves) points may look like outliers just data curve. done selecting outliers, click [esc] move next screen. second screen verifies status point selections first screen gives opportunity unselect points flagged ‘fail’. third fourth screens equivalent plots -Q (light response) curves. Finally, function returns copy original data new column, “QC”, added. column flag passed values 1, unchecked values 0, failed values -1. function Licor_QC optional arguement, curve, can set either “ACi” “AQ” want perform one diagnostics rather (default). Also, QC code attempts automatically separate points part ACi curve parts part AQ curve, based close points variable supposed held constant. optional variable “tol” controls tolerance filter, expressed proportion fixed value. default value, 0.05, corresponds 5% deviation. example, ACi curve light level held constant code filters PARi variable find mode included data ’s within 5% mode ACi curve. feel QA/QC function, ’ll want run data ’ve loaded.","code":"master[[1]] <- Licor_QC(master[[1]]) for(i in 1:length(master)){     master[[i]] = Licor_QC(master[[i]]) }"},{"path":"/articles/ResponseCurves.html","id":"merge-data-into-one-data-frame","dir":"Articles","previous_headings":"","what":"Merge data into one data frame","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"data ’s checked ’ll merge one large data frame","code":"dat <- do.call(\"rbind\", master)  ## if QC was done, remove both unchecked points and those that fail QC if(\"QC\" %in% colnames(dat)){   dat <- dat[-which(dat$QC < 1),]   } else {   QC <- rep(1, nrow(dat))   dat <- cbind(dat, QC) }"},{"path":"/articles/ResponseCurves.html","id":"fit-fvcb-model-to-composite-data","dir":"Articles","previous_headings":"","what":"Fit FvCB model to composite data","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"want fit model data one leaf one required argument data frame photosynthetic data. However, code also allows use fit FvCB model data . MCMC can take bit time run, example code written load existing fit exists, just makes knitting vignette efficient. returned object list two mcmc.lists, “params” “predict”, text JAGS model fit. can look model : Note lines beginning # comments. comments followed specific tags, RLEAF.V RLEAF., bits code get turned specify leaf random effects (see ). ‘params’ mcmc.list contains parameter estimate MCMC chains, can standard MCMC diagnositics . (Note: OK ignore par(mfrow = ..., mar = ...) calls appear elsewhere. use vignette cram subplots together compactly possible, everyday use package perfectly fine leave parameters default values.)   ‘predict’ object can used perform standard predictive diagnostics construct CI around curves.","code":"fit1 <- fitA(master[[1]]) if(file.exists(\"fit.RData\")){   load(\"fit.RData\") } else{   fit <- fitA(dat)   save(fit, file = \"fit.RData\") } ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 133 ##    Unobserved stochastic nodes: 139 ##    Total graph size: 2117 ##  ## Initializing model writeLines(fit$model) ##    ## model{ ##  ## ## Priors ##   Jmax0 ~ dlnorm(4.7,2.7)             ## maximum electron transport rate prior ##   alpha0~dnorm(0.25,100)             ##quantum yield  (mol electrons/mole photon) prior ##   vmax0 ~dlnorm(4.6,2.7)             ## maximum rubisco capacity prior ##  ##   #Jmax ~ dweibull(2.0,260)          ## maximum electron transport rate prior Serbin 2012 ##   #alpha0 ~ dgamma(2.0,22.0)         ## quantum yield prior Serbin 2012 ##   #vmax0 ~ dweibull(1.7,80)          ## maximum rate of carboxylation prior Serbin 2012 ##  ##   r0 ~ dlnorm(0.75,1.56)             ## leaf respiration prior ##   #r ~ dweibull(2.0,6.0)             ## broad leaf respiration prior for trees ##   cp0 ~ dlnorm(1.9,2.7)              ## CO2 compensation point prior ##   tau ~ dgamma(0.1,0.1) ## #TPU  tpu~ dlnorm(3,2.8)             ##tpu ##  ## ## Constants: Bernacchi et al 2001, PC&E, Table 1 ## R <- 8.3144621 ## gas constant ## r.c <- 18.72 ## r.H <- 46.39 ## Vc.c <- 26.35 ## Vc.H <- 65.33 ## Vo.c <- 22.98 ## Vo.H <- 60.11 ## cp.c <- 19.02 ## cp.H <- 37.83 ## cp.ref <- 42.75 ## Kc.c <- 38.05 ## Kc.H <- 79.43 ## Kc.ref <- 404.9 ## Ko.c <- 20.30 ## Ko.H <- 36.38 ## Ko.ref <- 278.4 ##  ## ## Constants: June et al 2004, Funct Plant Bio ## Omega <- 18 ## To <- 35    ## Representative value, would benifit from spp calibration! ##  ## ## Vcmax BETAS ##  ## #RLEAF.V  tau.Vleaf~dgamma(0.1,0.1)          ## add random leaf effects ## #RLEAF.V  for(i in 1:nrep){                   ## #RLEAF.V   Vleaf[i]~dnorm(0,tau.Vleaf) ## #RLEAF.V  } ##  ## ## alpha BETAs ##  ## #RLEAF.A  tau.Aleaf~dgamma(0.1,0.1) ## #RLEAF.A  for(i in 1:nrep){                   ## #RLEAF.A   Aleaf[i]~dnorm(0,tau.Aleaf) ## #RLEAF.A  } ##  ##   for(i in 1:n) { ##  ##      r[i]  <- r0 ##B01* exp(r.c - r.H/R/T[i]) ##      cp[i] <- cp0 ##B01* exp(cp.c - cp.H/R/T[i])/cp.ref ##      Kc.T[i] <- Kc ##B01* exp(Kc.c - Kc.H/R/T[i])/Kc.ref ##      Ko.T[i] <- Ko ##B01* exp(Ko.c - Ko.H/R/T[i])/Ko.ref ##      Jmax[i] <- Jmax0 ##J04 * exp(-(T[i]-To)*(T[i]-To)/(Omega*Omega)) ##  ##      alpha[i] <- alpha0 #AFORMULA ##      al[i]<-(alpha[i]*q[i]/(sqrt(1+(alpha[i]*alpha[i]*q[i]*q[i])/(Jmax[i]*Jmax[i]))))*(pi[i]-cp[i])/(4*pi[i]+8*cp[i])    ## electron transport limited without covariates ##  ##      vmax.refT[i] <- vmax0 #VFORMULA ##      vmax[i] <- vmax.refT[i] ##B01* exp(Vc.c - Vc.H/R/T[i]) ##      ae[i]<- vmax[i]*(pi[i]-cp[i])/(pi[i]+Kc.T[i]*(1+po/Ko.T[i]))                                                    ## maximum rubisco limited without covariates ##  ## #TPU    ap[i]<-3*tpu                      ## phosphate limited ##  ##      pmean[i]<-min(al[i], ae[i]) - r[i]      ## predicted net photosynthesis ##      an[i]~dnorm(pmean[i],tau)            ## likelihood ##      pA[i] ~ dnorm(pmean[i],tau)          ## prediction ##      } ##  ##      foo <- rep[1] + nrep + T[1]                ## prevent warnings ## } par(mfrow = c(6, 2), mar = c(4, 2, 2, 1)) plot(fit$params, auto.layout = FALSE)    ## MCMC diagnostic plots summary(fit$params) ## parameter estimates ##  ## Iterations = 1:5000 ## Thinning interval = 1  ## Number of chains = 3  ## Sample size per chain = 5000  ##  ## 1. Empirical mean and standard deviation for each variable, ##    plus standard error of the mean: ##  ##             Mean        SD  Naive SE Time-series SE ## Jmax0  1.405e+02 2.926e+01 2.389e-01      1.063e+00 ## alpha0 2.756e-01 7.815e-02 6.381e-04      1.163e-03 ## cp0    4.643e+01 1.221e+01 9.971e-02      3.583e-01 ## r0     2.571e+00 1.588e+00 1.297e-02      4.303e-02 ## tau    7.079e-03 8.932e-04 7.293e-06      9.334e-06 ## vmax0  9.353e+01 6.651e+01 5.431e-01      1.645e+00 ##  ## 2. Quantiles for each variable: ##  ##             2.5%       25%       50%       75%     97.5% ## Jmax0  1.029e+02 1.237e+02 135.96090 1.500e+02 2.144e+02 ## alpha0 1.344e-01 2.199e-01   0.27156 3.279e-01 4.384e-01 ## cp0    1.495e+01 4.022e+01  47.20650 5.369e+01 6.897e+01 ## r0     5.061e-01 1.379e+00   2.24573 3.398e+00 6.419e+00 ## tau    5.426e-03 6.455e-03   0.00704 7.665e-03 8.905e-03 ## vmax0  2.837e+01 4.844e+01  74.96190 1.170e+02 2.706e+02 par(mfrow = c(3, 2), mar = c(4, 4, 2, 1)) coda::gelman.plot(fit$params, auto.layout = FALSE) coda::gelman.diag(fit$params) ## Potential scale reduction factors: ##  ##        Point est. Upper C.I. ## Jmax0        1.00       1.00 ## alpha0       1.00       1.01 ## cp0          1.01       1.03 ## r0           1.00       1.00 ## tau          1.00       1.00 ## vmax0        1.01       1.01 ##  ## Multivariate psrf ##  ## 1.01 ## predicted vs observed plot par(mfrow = c(1, 1), mar = c(4, 4, 2, 1)) mstats <- summary(fit$predict) pmean <- mstats$statistics[grep(\"pmean\", rownames(mstats$statistics)), 1] plot(pmean, dat$Photo, pch = \"+\", xlab = \"Predicted A\", ylab = \"Observed A\") abline(0, 1, col = 2, lwd = 2) par(mfrow = c(3, 4), mar = c(4, 4, 2, 1)) plot_photo(dat, fit) ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\""},{"path":"/articles/ResponseCurves.html","id":"refit-with-leaf-level-random-effects","dir":"Articles","previous_headings":"","what":"Refit with leaf-level random effects","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"Next, let’s look specify leaf-level random effects model. ’re going add extra arguement function, list model specifications. list refers α\\alpha V refers VcmaxV_\\textrm{cmax}. Fixed refers specification fixed effects, ’re leaving unspecified moment (NULL). Random refers specification random effects, ’re setting ‘leaf’ order allow alphaalpha VcmaxV_\\textrm{cmax} vary leaf--leaf basis. Note: moment ‘leaf’ valid random effect, though future hope allow specification arbitrary random effects covariate file (see next section specify covariates). Next, n.iter refers number MCMC iterations run model. ’re setting 5000, default. can increase find model isn’t converging. example, wanted increase iterations previous default model, set fixed random effects NULL increase n.iter. Finally, match variable used group records individual leaves match individual leaves covariate data. look photosynthesis dataframe, dat, ’ll see column fname corresponds filename data read (’re assuming file contains data one leaf, ’s hard add columns data want group things ways) model specified, fitting diagnostics .","code":"A.model <- list(a.fixed = NULL, a.random = \"leaf\",                  V.fixed = NULL, V.random = \"leaf\",                  n.iter = 5000, match = \"fname\") if(file.exists(\"fitI.RData\")){   load(\"fitI.RData\") } else{   fitI <- fitA(dat,model = A.model)   save(fitI, file=\"fitI.RData\") } ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 133 ##    Unobserved stochastic nodes: 165 ##    Total graph size: 2556 ##  ## Initializing model par(mfrow = c(8, 2), mar = c(4, 4, 2, 1)) plot(fitI$params, auto.layout = FALSE)    ## MCMC diagnostic plotssummary par(mfrow = c(4, 2), mar = c(4, 4, 2, 1)) coda::gelman.plot(fitI$params, auto.layout = FALSE) coda::gelman.diag(fitI$params) ## Potential scale reduction factors: ##  ##           Point est. Upper C.I. ## Jmax0           1.14       1.33 ## alpha0          1.35       1.97 ## cp0             1.01       1.02 ## r0              1.01       1.02 ## tau             1.00       1.01 ## tau.Aleaf       1.00       1.01 ## tau.Vleaf       1.00       1.00 ## vmax0           1.06       1.13 ##  ## Multivariate psrf ##  ## 1.3 ## predicted vs observed plot par(mfrow = c(1, 1), mar = c(4, 4, 2, 1)) mstats <- summary(fitI$predict) pmean <- mstats$statistics[grep(\"pmean\",rownames(mstats$statistics)),1] plot(pmean, dat$Photo, pch = \"+\", xlab = \"Predicted A\", ylab = \"Observed A\") abline(0,1,col=2,lwd=2) par(mfrow = c(3, 4), mar = c(4, 4, 2, 1)) plot_photo(dat,fitI) ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\""},{"path":"/articles/ResponseCurves.html","id":"fitting-the-model-with-covariates","dir":"Articles","previous_headings":"","what":"Fitting the model with covariates","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"Next, let’s look fit model includes covariates. begin let’s load covariate data. specific case covariate data, leaf % Nitrogen, simulated covariates actually measured leaves. define model ’ll define list model specifications. Specifically going set VcmaxVcmax linear functions leaf N. ’ll set V.fixed “N” ’ll set V.random NULL turn leaf random effect. example ’ll leave α\\alpha random. additional covariates, example SLA chl (leaf chlorophyll), might write model “N + SLA + chl” just wanted direct effects “N + SLA + chl + NSLA + Nchl + SLA*chl” also wanted pairwise interactions. said, case don’t large enough sample size justify many covariates. Also note rows photosynthesis data matched rows covariate data using column specified arguement ‘match’. default , fname, filename photosynthetic data. Typically one file corresponds one leaf set traits match file. data organized differently ’ll want specify different column match. call fitA function now pass just photosynthetic data model, also covariate data. Otherwise fit diagnostics identical .","code":"cov.data = read.csv(system.file(\"extdata\", \"cov.csv\", package = \"PEcAn.photosynthesis\")) knitr::kable(cov.data) C.model <- list(a.fixed = NULL, a.random = \"leaf\",                  V.fixed= \"N\", V.random = NULL,                 n.iter = 5000, match = \"fname\") if(file.exists(\"fitC.RData\")){   load(\"fitC.RData\") } else{   fitC <- fitA(dat,cov.data,model = C.model)   save(fitC,file=\"fitC.RData\") } ## Compiling model graph ##    Resolving undeclared variables ##    Allocating nodes ## Graph information: ##    Observed stochastic nodes: 133 ##    Unobserved stochastic nodes: 153 ##    Total graph size: 2569 ##  ## Initializing model par(mfrow = c(8, 2), mar = c(4, 4, 2, 1)) plot(fitC$params,auto.layout = FALSE)    ## MCMC diagnostic plots par(mfrow = c(4, 2), mar = c(4, 4, 2, 1)) summary(fitC$params) ## parameter estimates ##  ## Iterations = 1:5000 ## Thinning interval = 1  ## Number of chains = 3  ## Sample size per chain = 5000  ##  ## 1. Empirical mean and standard deviation for each variable, ##    plus standard error of the mean: ##  ##                Mean       SD  Naive SE Time-series SE ## Jmax0     335.86843 14.28546 1.166e-01      0.3729111 ## alpha0      0.16624  0.06558 5.355e-04      0.0090490 ## betaVN      0.19342 31.86655 2.602e-01      0.3229530 ## cp0        57.54440  2.09956 1.714e-02      0.0386342 ## r0          0.50948  0.24488 1.999e-03      0.0040166 ## tau         0.08101  0.01084 8.851e-05      0.0001193 ## tau.Aleaf  18.21409  9.26116 7.562e-02      0.1745519 ## vmax0      81.11745  5.36781 4.383e-02      0.1050319 ##  ## 2. Quantiles for each variable: ##  ##                2.5%       25%      50%       75%    97.5% ## Jmax0     312.43919 326.21156 334.2835 343.75646 369.5297 ## alpha0      0.04191   0.11800   0.1691   0.21638   0.2785 ## betaVN    -62.25255 -21.37764   0.2048  21.61788  62.8789 ## cp0        53.27162  56.17342  57.5768  58.95180  61.5401 ## r0          0.15613   0.33301   0.4679   0.64639   1.1005 ## tau         0.06100   0.07348   0.0807   0.08806   0.1032 ## tau.Aleaf   5.26992  11.53853  16.5233  22.95370  40.8290 ## vmax0      74.54143  77.69247  79.8399  83.17739  94.6948 coda::gelman.plot(fitC$params, auto.layout = FALSE) coda::gelman.diag(fitC$params) ## Potential scale reduction factors: ##  ##           Point est. Upper C.I. ## Jmax0           1.05       1.15 ## alpha0          3.05       6.08 ## betaVN          1.00       1.00 ## cp0             1.00       1.01 ## r0              1.00       1.00 ## tau             1.00       1.00 ## tau.Aleaf       1.09       1.26 ## vmax0           1.00       1.01 ##  ## Multivariate psrf ##  ## 2.32 ## predicted vs observed plot par(mfrow = c(1, 1),  mar = c(4, 4, 2, 1)) mstats <- summary(fitC$predict) pmean <- mstats$statistics[grep(\"pmean\", rownames(mstats$statistics)), 1] plot(pmean, dat$Photo, pch = \"+\", xlab = \"Predicted A\", ylab = \"Observed A\") abline(0,1,col=2,lwd=2) par(mfrow = c(3, 4), mar = c(4, 4, 2, 1)) plot_photo(dat, fitC) ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\" ## [1] \"No AQ data available\" ## [1] \"No ACi data available\""},{"path":"/articles/ResponseCurves.html","id":"citations","dir":"Articles","previous_headings":"","what":"Citations","title":"Fitting Hierarchical Bayes photosynthetic response curves","text":"Dietze, M.C. (2014). Gaps knowledge data driving uncertainty models photosynthesis. Photosynth. Res., 19, 3–14. Farquhar, G., Caemmerer, S. & Berry, J.. (1980). biochemical model photosynthetic CO2 assimilation leaves C3 species. Planta, 149, 78–90. Feng, X. & Dietze, M.C. (2013). Scale dependence effects leaf ecophysiological traits photosynthesis: Bayesian parameterization photosynthesis models. New Phytol., 200, 1132–1144.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mike Dietze. Author, maintainer. Xiaohui Feng. Author. Shawn Serbin. Author. Shashank Singh. Author. Chris Black. Contributor. University Illinois, NCSA. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dietze M, Feng X, Serbin S, Singh S (2025). PEcAn.photosynthesis: PEcAn functions used leaf-level photosynthesis calculations. R package version 1.7.4, https://pecanproject.github.io.","code":"@Manual{,   title = {PEcAn.photosynthesis: PEcAn functions used for leaf-level photosynthesis calculations},   author = {Mike Dietze and Xiaohui Feng and Shawn Serbin and Shashank Singh},   year = {2025},   note = {R package version 1.7.4},   url = {https://pecanproject.github.io}, }"},{"path":"/index.html","id":"pecanphotosynthesis","dir":"","previous_headings":"","what":"PEcAn functions used for leaf-level photosynthesis calculations","title":"PEcAn functions used for leaf-level photosynthesis calculations","text":"PEcAn functions used leaf-level photosynthesis calculations","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PEcAn functions used for leaf-level photosynthesis calculations","text":"can install development version PEcAn.photosynthesis r-universe like : can install directly GitHub remotes package like :","code":"# Enable repository from pecanproject options(repos = c(   pecanproject = 'https://pecanproject.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) # Download and install PEcAn.photosynthesis in R install.packages('PEcAn.photosynthesis') library(remotes) install_github('pecanproject/pecan',  subdir = \"modules/photosynthesis\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"PEcAn functions used for leaf-level photosynthesis calculations","text":"basic example shows solve common problem:","code":"library(PEcAn.photosynthesis) ## basic example code"},{"path":"/reference/Licor_QC.html","id":null,"dir":"Reference","previous_headings":"","what":"Licor_QC — Licor_QC","title":"Licor_QC — Licor_QC","text":"Licor_QC","code":""},{"path":"/reference/Licor_QC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Licor_QC — Licor_QC","text":"","code":"Licor_QC(dat, curve = c(\"ACi\", \"AQ\"), tol = 0.05)"},{"path":"/reference/Licor_QC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Licor_QC — Licor_QC","text":"dat data frame curve Whether Quality Control examining 'ACi' curve, 'AQ' curve, tol Code automatically tries separate ACi AQ curves dataset detecting 'reference' condition light CO2 respectively. relative error around mode detection.","code":""},{"path":"/reference/Licor_QC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Licor_QC — Licor_QC","text":"Mike Dietze","code":""},{"path":"/reference/estimate_mode.html","id":null,"dir":"Reference","previous_headings":"","what":"estimate_mode — estimate_mode","title":"estimate_mode — estimate_mode","text":"estimate_mode","code":""},{"path":"/reference/estimate_mode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estimate_mode — estimate_mode","text":"","code":"estimate_mode(x, adjust = 0.1)"},{"path":"/reference/estimate_mode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estimate_mode — estimate_mode","text":"x numeric values adjust passed stats::density","code":""},{"path":"/reference/estimate_mode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"estimate_mode — estimate_mode","text":"Mike Dietze Xiaohui Feng","code":""},{"path":"/reference/fitA.html","id":null,"dir":"Reference","previous_headings":"","what":"fitA — fitA","title":"fitA — fitA","text":"fitA","code":""},{"path":"/reference/fitA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitA — fitA","text":"","code":"fitA(flux.data, cov.data = NULL, model = NULL)"},{"path":"/reference/fitA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitA — fitA","text":"flux.data data.frame Licor data, concatenated rows, leading column 'fname' used count number curves match covariates cov.data data.frame covariate data. Column names used formulas model list including least 6 components: fixed effects model alpha (.fixed) Vcmax (V.fixed), random effects (.random, V.random), variable used match gas-exchange covariate data (match), number MCMC interations (n.iter). Additional optional arguments: TPU = TRUE turns TPU limitation; Temp == 'Bernacchi01' turns Bernacchi et al 2001 temperature correction. turned parameters estimated 25C, otherwise temperature correction applied. Setting Temp = 'June2004' turn June et al 2004 Funct Plant Biol temperature correction Jmax. Note: two corrections mutually exclusive, can set Temp = c('June2004','Bernacchi2001') Right now fixed effects specified string using standard R lm formula syntax, without LHS variable (e.g. '~ SLA + chl + SLA:chl'). tilde optional. random effects, two options right now just 'leaf' leaf-level random effects NULL. 'model' default sets effects NULL (fit one curve data) n.iter=1000.","code":""},{"path":"/reference/fitA.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fitA — fitA","text":"Mike Dietze Xiaohui Feng","code":""},{"path":"/reference/plot_photo.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_photo — plot_photo","title":"plot_photo — plot_photo","text":"plot_photo","code":""},{"path":"/reference/plot_photo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_photo — plot_photo","text":"","code":"plot_photo(data, out, curve = c(\"ACi\", \"AQ\"), tol = 0.05, byLeaf = TRUE)"},{"path":"/reference/plot_photo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_photo — plot_photo","text":"data input data fitted model output fitA curve Whether Quality Control examining 'ACi' curve, 'AQ' curve, tol Code automatically tries separate ACi AQ curves dataset detecting 'reference' condition light CO2 respectively. relative error around mode detection. byLeaf whether plot fits leaf--leaf basis","code":""},{"path":"/reference/plot_photo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plot_photo — plot_photo","text":"Mike Dietze","code":""},{"path":"/reference/read_Licor.html","id":null,"dir":"Reference","previous_headings":"","what":"read_Licor — read_Licor","title":"read_Licor — read_Licor","text":"read_Licor","code":""},{"path":"/reference/read_Licor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_Licor — read_Licor","text":"","code":"read_Licor(filename, sep = \"\\t\", ...)"},{"path":"/reference/read_Licor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_Licor — read_Licor","text":"filename name file read sep file delimiter. defaults tab ... optional arguements forwarded read.table","code":""},{"path":"/reference/read_Licor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"read_Licor — read_Licor","text":"Mike Dietze","code":""},{"path":[]},{"path":"/news/index.html","id":"license-change-1-7-4","dir":"Changelog","previous_headings":"","what":"License change","title":"PEcAn.photosynthesis 1.7.4","text":"PEcAn.photosynthesis now distributed BSD three-clause license instead NCSA Open Source license.","code":""},{"path":"/news/index.html","id":"fixed-1-7-4","dir":"Changelog","previous_headings":"","what":"Fixed","title":"PEcAn.photosynthesis 1.7.4","text":"Vignette compilation now works","code":""},{"path":[]},{"path":"/news/index.html","id":"fixed-1-7-3","dir":"Changelog","previous_headings":"","what":"Fixed","title":"PEcAn.photosynthesis 1.7.3","text":"Cleaned many check warnings (@moki1202, #2821) Fixed vignette compilation","code":""},{"path":"/news/index.html","id":"pecanphotosynthesis-171","dir":"Changelog","previous_headings":"","what":"PEcAn.photosynthesis 1.7.1","title":"PEcAn.photosynthesis 1.7.1","text":"changes 1.7.1 earlier recorded single file PEcAn packages; please see https://github.com/PecanProject/pecan/blob/v1.7.1/CHANGELOG.md details.","code":""}]
