[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David LeBauer. Author. Rob Kooper. Author, maintainer. Shawn Serbin. Author. Alexey Shiklomanov. Author. Shashank Singh. Author. Chris Black. Author. University Illinois, NCSA. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"LeBauer D, Kooper R, Serbin S, Shiklomanov , Singh S, Black C (2025). PEcAn.remote: PEcAn Model Execution Utilities. R package version 1.9.0.9000, https://pecanproject.github.io.","code":"@Manual{,   title = {PEcAn.remote: PEcAn Model Execution Utilities},   author = {David LeBauer and Rob Kooper and Shawn Serbin and Alexey Shiklomanov and Shashank Singh and Chris Black},   year = {2025},   note = {R package version 1.9.0.9000},   url = {https://pecanproject.github.io}, }"},{"path":"/index.html","id":"pecanremote","dir":"","previous_headings":"","what":"PEcAn Model Execution Utilities","title":"PEcAn Model Execution Utilities","text":"PEcAn Model Execution Utilities","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PEcAn Model Execution Utilities","text":"can install development version PEcAn.remote r-universe like : can install directly GitHub remotes package like :","code":"# Enable repository from pecanproject options(repos = c(   pecanproject = 'https://pecanproject.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) # Download and install PEcAn.remote in R install.packages('PEcAn.remote') library(remotes) install_github('pecanproject/pecan',  subdir = \"base/remote\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"PEcAn Model Execution Utilities","text":"basic example shows solve common problem:","code":"library(PEcAn.remote) ## basic example code"},{"path":"/reference/check_model_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if model run was successful — check_model_run","title":"Check if model run was successful — check_model_run","text":"Check model run successful","code":""},{"path":"/reference/check_model_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if model run was successful — check_model_run","text":"","code":"check_model_run(out, stop.on.error = TRUE)"},{"path":"/reference/check_model_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if model run was successful — check_model_run","text":"Output model execution, character. stop..error Throw error runs fails. Default TRUE.","code":""},{"path":"/reference/check_model_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if model run was successful — check_model_run","text":"TRUE model run succeeded. model run failed, throw error stop..error, return FALSE.","code":""},{"path":"/reference/fqdn.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the fully qualified hostname. — fqdn","title":"Returns the fully qualified hostname. — fqdn","text":"Returns fully qualified hostname. potentially different Sys.info()['nodename'] can return just hostname part domain well. example machine pecan.ncsa.illinois.edu return just fqdn pecan hostname.","code":""},{"path":"/reference/fqdn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the fully qualified hostname. — fqdn","text":"","code":"fqdn()"},{"path":"/reference/fqdn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the fully qualified hostname. — fqdn","text":"fully qualified hostname","code":""},{"path":"/reference/fqdn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns the fully qualified hostname. — fqdn","text":"Rob Kooper","code":""},{"path":"/reference/fqdn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the fully qualified hostname. — fqdn","text":"","code":"fqdn() #> [1] \"68dc88f9baaa\""},{"path":"/reference/is.localhost.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if local host — is.localhost","title":"Check if local host — is.localhost","text":"Check host local","code":""},{"path":"/reference/is.localhost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if local host — is.localhost","text":"","code":"is.localhost(host)"},{"path":"/reference/is.localhost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if local host — is.localhost","text":"host hostname checked","code":""},{"path":"/reference/is.localhost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if local host — is.localhost","text":"true host local host name","code":""},{"path":"/reference/is.localhost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if local host — is.localhost","text":"Given hostname localhost. returns true either value localhost, value fqdn.","code":""},{"path":"/reference/is.localhost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if local host — is.localhost","text":"Rob Kooper","code":""},{"path":"/reference/is.localhost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if local host — is.localhost","text":"","code":"is.localhost(fqdn()) #> [1] TRUE"},{"path":"/reference/kill.tunnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Kill tunnel to remote machine — kill.tunnel","title":"Kill tunnel to remote machine — kill.tunnel","text":"Kill tunnel remote machine","code":""},{"path":"/reference/kill.tunnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kill tunnel to remote machine — kill.tunnel","text":"","code":"kill.tunnel(settings, exe = TRUE, data = TRUE)"},{"path":"/reference/kill.tunnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kill tunnel to remote machine — kill.tunnel","text":"settings PEcAn settings list exe Kill tunnel executable? data Kill tunnel data?","code":""},{"path":"/reference/kill.tunnel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kill tunnel to remote machine — kill.tunnel","text":"Rob Kooper","code":""},{"path":"/reference/merge_job_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge multiple job.sh files into one larger file. — merge_job_files","title":"Merge multiple job.sh files into one larger file. — merge_job_files","text":"Merge multiple job.sh files one larger file.","code":""},{"path":"/reference/merge_job_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge multiple job.sh files into one larger file. — merge_job_files","text":"","code":"merge_job_files(settings, jobs_per_file = 10, outdir = NULL)"},{"path":"/reference/merge_job_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge multiple job.sh files into one larger file. — merge_job_files","text":"settings PEcAn.settings object host section. jobs_per_file number files want merge. outdir output directory merged job files.","code":""},{"path":"/reference/merge_job_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge multiple job.sh files into one larger file. — merge_job_files","text":"vector newly created filenames","code":""},{"path":"/reference/merge_job_files.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Merge multiple job.sh files into one larger file. — merge_job_files","text":"Dongchen Zhang","code":""},{"path":"/reference/open_tunnel.html","id":null,"dir":"Reference","previous_headings":"","what":"Open an SSH tunnel, prompting for passwords as needed — open_tunnel","title":"Open an SSH tunnel, prompting for passwords as needed — open_tunnel","text":"Open SSH tunnel, prompting passwords needed","code":""},{"path":"/reference/open_tunnel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open an SSH tunnel, prompting for passwords as needed — open_tunnel","text":"","code":"open_tunnel(   remote_host,   user = NULL,   password = NULL,   tunnel_dir = \"~/.pecan/tunnel/\",   wait.time = 15,   tunnel_script = \"~/pecan/web/sshtunnel.sh\" )"},{"path":"/reference/open_tunnel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open an SSH tunnel, prompting for passwords as needed — open_tunnel","text":"remote_host name remote server connect (e.g. geo.bu.edu) user username remote_host password password remote_host tunnel_dir directory store tunnel file , typically settings$host wait.time long give system connect deleting password (seconds) tunnel_script Path sshtunnel.sh script file opening tunnel","code":""},{"path":"/reference/open_tunnel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open an SSH tunnel, prompting for passwords as needed — open_tunnel","text":"numeric giving ssh PID configured, otherwise logical TRUE = success","code":""},{"path":"/reference/qsub_get_jobid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Job ID from qsub output — qsub_get_jobid","title":"Get Job ID from qsub output — qsub_get_jobid","text":"Get Job ID qsub output","code":""},{"path":"/reference/qsub_get_jobid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Job ID from qsub output — qsub_get_jobid","text":"","code":"qsub_get_jobid(out, qsub.jobid, stop.on.error)"},{"path":"/reference/qsub_get_jobid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Job ID from qsub output — qsub_get_jobid","text":"Output model execution, character. qsub.jobid (character) Regular expression string extracting job ID qsub output. Usually settings$host$qsub.jobid stop..error Throw error runs fails. Default TRUE.","code":""},{"path":"/reference/qsub_get_jobid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Job ID from qsub output — qsub_get_jobid","text":"Job ID, string","code":""},{"path":"/reference/qsub_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"qsub_parallel — qsub_parallel","title":"qsub_parallel — qsub_parallel","text":"qsub_parallel","code":""},{"path":"/reference/qsub_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"qsub_parallel — qsub_parallel","text":"","code":"qsub_parallel(   settings,   files = NULL,   prefix = \"sipnet.out\",   sleep = 10,   hybrid = TRUE )"},{"path":"/reference/qsub_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"qsub_parallel — qsub_parallel","text":"settings pecan settings object files allow submit jobs based job.sh file paths. prefix used detecting jobs completed . sleep time (second) wait time jobs completed. hybrid Boolean argument decide way detecting job completion. TRUE detect outputted files job ids server. FALSE detect job ids server.","code":""},{"path":"/reference/qsub_parallel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"qsub_parallel — qsub_parallel","text":"Dongchen Zhang","code":""},{"path":"/reference/qsub_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"qsub_parallel — qsub_parallel","text":"","code":"if (FALSE) { # \\dontrun{   qsub_parallel(settings) } # }"},{"path":"/reference/qsub_run_finished.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if qsub run finished — qsub_run_finished","title":"Check if qsub run finished — qsub_run_finished","text":"Check qsub run finished","code":""},{"path":"/reference/qsub_run_finished.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if qsub run finished — qsub_run_finished","text":"","code":"qsub_run_finished(run, host, qstat)"},{"path":"/reference/qsub_run_finished.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if qsub run finished — qsub_run_finished","text":"run run ID, integer host host structure execute command qstat (string) qstat command checking job status","code":""},{"path":"/reference/qsub_run_finished.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if qsub run finished — qsub_run_finished","text":"TRUE run marked DONE, otherwise FALSE.","code":""},{"path":"/reference/rabbitmq_create_queue.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a queue in RabbitMQ. — rabbitmq_create_queue","title":"Create a queue in RabbitMQ. — rabbitmq_create_queue","text":"first check see queue already exists RabbitMQ, create queue. queue exists, created return TRUE, return FALSE otherwise.","code":""},{"path":"/reference/rabbitmq_create_queue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a queue in RabbitMQ. — rabbitmq_create_queue","text":"","code":"rabbitmq_create_queue(   url,   auth,   vhost,   queue,   auto_delete = FALSE,   durable = TRUE )"},{"path":"/reference/rabbitmq_create_queue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a queue in RabbitMQ. — rabbitmq_create_queue","text":"url parsed RabbitMQ URL. auth httr authentication object use. vhost vhost create queue. queue queue checked/created. auto_delete queue deleted afterwards (FALSE default) durable messages exists server restart (TRUE default)","code":""},{"path":"/reference/rabbitmq_create_queue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a queue in RabbitMQ. — rabbitmq_create_queue","text":"TRUE queue now exists, FALSE otherwise.","code":""},{"path":"/reference/rabbitmq_create_queue.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a queue in RabbitMQ. — rabbitmq_create_queue","text":"Rob Kooper","code":""},{"path":"/reference/rabbitmq_get_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Get message from RabbitMQ. — rabbitmq_get_message","title":"Get message from RabbitMQ. — rabbitmq_get_message","text":"get message RabbitMQ, queue exist created. message converted json message returned.","code":""},{"path":"/reference/rabbitmq_get_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get message from RabbitMQ. — rabbitmq_get_message","text":"","code":"rabbitmq_get_message(uri, queue, count = 1, prefix = \"\", port = 15672)"},{"path":"/reference/rabbitmq_get_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get message from RabbitMQ. — rabbitmq_get_message","text":"uri RabbitMQ URI URL rest endpoint queue queue message received . count number messages retrieve queue. prefix prefix rabbitmq api endpoint, default prefix. port port management interface, default 15672.","code":""},{"path":"/reference/rabbitmq_get_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get message from RabbitMQ. — rabbitmq_get_message","text":"NA message retrieved, list messages payload.","code":""},{"path":"/reference/rabbitmq_get_message.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get message from RabbitMQ. — rabbitmq_get_message","text":"Alexey Shiklomanov, Rob Kooper","code":""},{"path":"/reference/rabbitmq_parse_uri.html","id":null,"dir":"Reference","previous_headings":"","what":"parse the RabbiMQ URI. — rabbitmq_parse_uri","title":"parse the RabbiMQ URI. — rabbitmq_parse_uri","text":"parse uri smaller pieces can used talk rest endpoint RabbitMQ.","code":""},{"path":"/reference/rabbitmq_parse_uri.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse the RabbiMQ URI. — rabbitmq_parse_uri","text":"","code":"rabbitmq_parse_uri(uri, prefix = \"\", port = 15672)"},{"path":"/reference/rabbitmq_parse_uri.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse the RabbiMQ URI. — rabbitmq_parse_uri","text":"uri amqp URI prefix prefix RabbitMQ managmenet interface uses port port rabbitmq managment interface","code":""},{"path":"/reference/rabbitmq_parse_uri.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse the RabbiMQ URI. — rabbitmq_parse_uri","text":"list contains url mangement interface, username password vhost.","code":""},{"path":"/reference/rabbitmq_post_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Post message to RabbitMQ. — rabbitmq_post_message","title":"Post message to RabbitMQ. — rabbitmq_post_message","text":"submit message RabbitMQ, queue exist created. message converted json message submitted.","code":""},{"path":"/reference/rabbitmq_post_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post message to RabbitMQ. — rabbitmq_post_message","text":"","code":"rabbitmq_post_message(uri, queue, message, prefix = \"\", port = 15672)"},{"path":"/reference/rabbitmq_post_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post message to RabbitMQ. — rabbitmq_post_message","text":"uri RabbitMQ URI URL rest endpoint queue queue message submitted message message submit, beconverted json. prefix prefix rabbitmq api endpoint, default prefix. port port management interface, default 15672.","code":""},{"path":"/reference/rabbitmq_post_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post message to RabbitMQ. — rabbitmq_post_message","text":"result post message send, NA failed.","code":""},{"path":"/reference/rabbitmq_post_message.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Post message to RabbitMQ. — rabbitmq_post_message","text":"Alexey Shiklomanov, Rob Kooper","code":""},{"path":"/reference/rabbitmq_send_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Send a message to RabbitMQ rest API. — rabbitmq_send_message","title":"Send a message to RabbitMQ rest API. — rabbitmq_send_message","text":"check resulting status code print message case something goes wrong.","code":""},{"path":"/reference/rabbitmq_send_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send a message to RabbitMQ rest API. — rabbitmq_send_message","text":"","code":"rabbitmq_send_message(url, auth, body, action = \"POST\", silent = FALSE)"},{"path":"/reference/rabbitmq_send_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send a message to RabbitMQ rest API. — rabbitmq_send_message","text":"url full endpoint rest url auth authentication rabbitmq httr:auth body actual body send, rabbitmq message. action rest action perform silent boolean indicate logging performed.","code":""},{"path":"/reference/rabbitmq_send_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send a message to RabbitMQ rest API. — rabbitmq_send_message","text":"return NA message failed, otherwise either return resulting message, availble empty string \"\".","code":""},{"path":"/reference/remote.copy.from.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy file from remote to local — remote.copy.from","title":"Copy file from remote to local — remote.copy.from","text":"Copy file/dir remote server local server","code":""},{"path":"/reference/remote.copy.from.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy file from remote to local — remote.copy.from","text":"","code":"remote.copy.from(   host,   src,   dst,   options = NULL,   delete = FALSE,   stderr = FALSE )"},{"path":"/reference/remote.copy.from.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy file from remote to local — remote.copy.from","text":"host list server, user optionally tunnel use. src remote file/dir copy dst local file/dir copy options passed rsync command, nothing specified everything rsynced delete case local dir non-existent files removed stderr stderr returned","code":""},{"path":"/reference/remote.copy.from.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy file from remote to local — remote.copy.from","text":"output command executed","code":""},{"path":"/reference/remote.copy.from.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy file from remote to local — remote.copy.from","text":"Copies file/dir remote server local server. dst folder copy file folder.","code":""},{"path":"/reference/remote.copy.from.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Copy file from remote to local — remote.copy.from","text":"Rob Kooper","code":""},{"path":"/reference/remote.copy.from.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy file from remote to local — remote.copy.from","text":"","code":"if (FALSE) { # \\dontrun{   host <- list(name='geo.bu.edu', user='kooper', tunnel='/tmp/geo.tunnel')   remote.copy.from(host, '/tmp/kooper', '/tmp/geo.tmp', delete=TRUE) } # }"},{"path":"/reference/remote.copy.to.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy file/dir to remote server from local server — remote.copy.to","title":"Copy file/dir to remote server from local server — remote.copy.to","text":"Copies file/dir remote server local server. dst folder copy file folder.","code":""},{"path":"/reference/remote.copy.to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy file/dir to remote server from local server — remote.copy.to","text":"","code":"remote.copy.to(host, src, dst, options = NULL, delete = FALSE, stderr = FALSE)"},{"path":"/reference/remote.copy.to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy file/dir to remote server from local server — remote.copy.to","text":"host host structure execute command src local file/dir copy dst remote file/dir copy options additional arguments passed rsync command delete case local dir non-existent files removed stderr stderr returned well.","code":""},{"path":"/reference/remote.copy.to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy file/dir to remote server from local server — remote.copy.to","text":"output command executed","code":""},{"path":"/reference/remote.copy.to.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Copy file/dir to remote server from local server — remote.copy.to","text":"Rob Kooper","code":""},{"path":"/reference/remote.copy.to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy file/dir to remote server from local server — remote.copy.to","text":"","code":"if (FALSE) { # \\dontrun{   host <- list(name='geo.bu.edu', user='kooper', tunnel='/tmp/geo.tunnel')   remote.copy.to(host, '/tmp/kooper', '/tmp/kooper', delete=TRUE) } # }"},{"path":"/reference/remote.execute.R.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute command remotely — remote.execute.R","title":"Execute command remotely — remote.execute.R","text":"Execute command remotely","code":""},{"path":"/reference/remote.execute.R.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute command remotely — remote.execute.R","text":"","code":"remote.execute.R(   script,   host = \"localhost\",   user = NA,   verbose = FALSE,   R = \"R\",   scratchdir = tempdir() )"},{"path":"/reference/remote.execute.R.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute command remotely — remote.execute.R","text":"script script invoked, list commands. host settings host list user username use remote login verbose output printed console R Path R executable binary file. scratchdir Path scratch directory temporary files remote execution.","code":""},{"path":"/reference/remote.execute.R.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute command remotely — remote.execute.R","text":"captured output command (stdout stderr)","code":""},{"path":"/reference/remote.execute.R.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute command remotely — remote.execute.R","text":"Executes given command remote host using ssh. user set system login given user. host given local machine execute command locally without ssh.","code":""},{"path":"/reference/remote.execute.R.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Execute command remotely — remote.execute.R","text":"Rob Kooper","code":""},{"path":"/reference/remote.execute.R.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute command remotely — remote.execute.R","text":"","code":"if (FALSE) { # \\dontrun{   remote.execute.R('list.files()', host='localhost', verbose=FALSE) } # }"},{"path":"/reference/remote.execute.cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute command remotely — remote.execute.cmd","title":"Execute command remotely — remote.execute.cmd","text":"Execute command remotely","code":""},{"path":"/reference/remote.execute.cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute command remotely — remote.execute.cmd","text":"","code":"remote.execute.cmd(host, cmd, args = character(), stderr = FALSE)"},{"path":"/reference/remote.execute.cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute command remotely — remote.execute.cmd","text":"host host structure execute command cmd system command invoked, character string. args character vector arguments command. stderr stderr returned well.","code":""},{"path":"/reference/remote.execute.cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute command remotely — remote.execute.cmd","text":"captured output command (stdout stderr)","code":""},{"path":"/reference/remote.execute.cmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute command remotely — remote.execute.cmd","text":"Executes given command remote host using ssh. user set system login given user. host given local machine execute command locally without ssh.","code":""},{"path":"/reference/remote.execute.cmd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Execute command remotely — remote.execute.cmd","text":"Rob Kooper","code":""},{"path":"/reference/remote.execute.cmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute command remotely — remote.execute.cmd","text":"","code":"if (FALSE) { # \\dontrun{   host <- list(name='geo.bu.edu', user='kooper', tunnel='/tmp/geo.tunnel')   print(remote.execute.cmd(host, 'ls', c('-l', '/'), stderr=TRUE)) } # }"},{"path":"/reference/setup_modellauncher.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup model launcher script and job list — setup_modellauncher","title":"Setup model launcher script and job list — setup_modellauncher","text":"Setup model launcher script job list","code":""},{"path":"/reference/setup_modellauncher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup model launcher script and job list — setup_modellauncher","text":"","code":"setup_modellauncher(run, rundir, host_rundir, mpirun, binary)"},{"path":"/reference/setup_modellauncher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup model launcher script and job list — setup_modellauncher","text":"run (numeric) run ID, integer rundir Local run directory. Usually settings$rundir host_rundir Remote host run directory. Usually settings$host$rundir mpirun MPI info, usually settings$host$modellauncher$mpirun binary Binary info, usually settings$host$modellauncher$binary","code":""},{"path":"/reference/start_qsub.html","id":null,"dir":"Reference","previous_headings":"","what":"Start qsub runs — start_qsub","title":"Start qsub runs — start_qsub","text":"Start qsub runs","code":""},{"path":"/reference/start_qsub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start qsub runs — start_qsub","text":"","code":"start_qsub(   run,   qsub_string,   rundir,   host,   host_rundir,   host_outdir,   stdout_log,   stderr_log,   job_script,   qsub_extra = NULL )"},{"path":"/reference/start_qsub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start qsub runs — start_qsub","text":"run (numeric) run ID, integer qsub_string qsub command string, arguments. Usually settings$host$qsub rundir Local run directory. Usually settings$rundir host Remote host, list character. Usually settings$host. host_rundir Remote host run directory. Usually settings$host$rundir host_outdir Remote host output directory. Usually settings$host$outdir stdout_log Logfile redirecting stdout. stderr_log Logfile redirecting stderr job_script Base name (path) script run. Usually either job.sh launcher.sh. qsub_extra Extra qsub arguments. Usually settings$host$modellauncher$qsub.extra","code":""},{"path":"/reference/start_qsub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start qsub runs — start_qsub","text":"Output qsub command, character. output can parsed ascertaining submission success.","code":""},{"path":"/reference/start_rabbitmq.html","id":null,"dir":"Reference","previous_headings":"","what":"Start model execution using rabbitmq — start_rabbitmq","title":"Start model execution using rabbitmq — start_rabbitmq","text":"Start model execution using rabbitmq","code":""},{"path":"/reference/start_rabbitmq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start model execution using rabbitmq — start_rabbitmq","text":"","code":"start_rabbitmq(folder, rabbitmq_uri, rabbitmq_queue)"},{"path":"/reference/start_rabbitmq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start model execution using rabbitmq — start_rabbitmq","text":"folder Directory containing jobs started rabbitmq_uri RabbitMQ uri messages posted rabbitmq_queue Queue messages submitted","code":""},{"path":"/reference/start_rabbitmq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start model execution using rabbitmq — start_rabbitmq","text":"Output execution command, character (see rabbitmq_post_message()).","code":""},{"path":"/reference/start_serial.html","id":null,"dir":"Reference","previous_headings":"","what":"Start model execution in serial mode — start_serial","title":"Start model execution in serial mode — start_serial","text":"Start model execution serial mode","code":""},{"path":"/reference/start_serial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start model execution in serial mode — start_serial","text":"","code":"start_serial(run, host, rundir, host_rundir, job_script)"},{"path":"/reference/start_serial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start model execution in serial mode — start_serial","text":"run (numeric) run ID, integer host Remote host, list character. Usually settings$host. rundir Local run directory. Usually settings$rundir host_rundir Remote host run directory. Usually settings$host$rundir job_script Base name (path) script run. Usually either job.sh launcher.sh.","code":""},{"path":"/reference/start_serial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Start model execution in serial mode — start_serial","text":"Output execution command, character (see remote.execute.cmd()).","code":""},{"path":"/reference/test_remote.html","id":null,"dir":"Reference","previous_headings":"","what":"Test remote execution — test_remote","title":"Test remote execution — test_remote","text":"Test remote execution","code":""},{"path":"/reference/test_remote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test remote execution — test_remote","text":"","code":"test_remote(host, stderr = TRUE, ...)"},{"path":"/reference/test_remote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test remote execution — test_remote","text":"host host structure execute command stderr stderr returned well. ... additional arguments.","code":""},{"path":"/reference/test_remote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test remote execution — test_remote","text":"TRUE remote execution successful. unsuccessful, depends value stderr. stderr = TRUE (default), function throw error. stderr = FALSE, function print logger error return FALSE.","code":""},{"path":"/reference/test_remote.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test remote execution — test_remote","text":"","code":"# Localhost execution should always work good_host <- list(name = \"localhost\") test_remote(good_host) #> [1] TRUE  bad_host <- list(name = \"bigbadwolf\") if (!test_remote(bad_host, stderr = FALSE)) {   print(\"Big Bad Wolf is a bad host.\") } #> Warning: running command ''ssh' -T bigbadwolf echo Testing remote bigbadwolf 2>/dev/null' had status 255 and error message 'Function not implemented' #> [1] \"Big Bad Wolf is a bad host.\""},{"path":"/news/index.html","id":"pecanremote-190","dir":"Changelog","previous_headings":"","what":"PEcAn.remote 1.9.0","title":"PEcAn.remote 1.9.0","text":"PEcAn.remote now distributed BSD 3-clause license instead NCSA Open Source license.","code":""},{"path":"/news/index.html","id":"removed-1-9-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"PEcAn.remote 1.9.0","text":"start.model.runs runModule.start.model.runs, defunct since moved PEcAn.workflow 2021, deleted.","code":""},{"path":[]},{"path":"/news/index.html","id":"added-1-8-0","dir":"Changelog","previous_headings":"","what":"Added","title":"PEcAn.remote 1.8.0","text":"start_rabbitmq now exported.","code":""},{"path":"/news/index.html","id":"fixed-1-8-0","dir":"Changelog","previous_headings":"","what":"Fixed","title":"PEcAn.remote 1.8.0","text":"Fixed circular dependency PEcAn.DB moving functions packages (see details individual functions )","code":""},{"path":"/news/index.html","id":"removed-1-8-0","dir":"Changelog","previous_headings":"","what":"Removed","title":"PEcAn.remote 1.8.0","text":"remote.copy.update, used one place contained typos guaranteed never worked anywhere else. start.model.runs runModule.start.model.runs moved package PEcAn.workflow, now named start_model_runs runModule_start_model_runs. original versions PEcAn.remote retained, now, stubs tell find new versions. stamp_started stamp_finished moved package PEcAn.DB.","code":""},{"path":"/news/index.html","id":"pecanremote-171","dir":"Changelog","previous_headings":"","what":"PEcAn.remote 1.7.1","title":"PEcAn.remote 1.7.1","text":"changes 1.7.1 earlier recorded single file PEcAn packages; please see https://github.com/PecanProject/pecan/blob/v1.7.1/CHANGELOG.md details.","code":""}]
