[{"path":"/articles/pecanrtm.vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The PEcAn RTM package","text":"PEcAnRTM package provides tools analyses involving common radiative transfer models. highlights package ability efficiently run suite related leaf canopy radiative transfer models, well perform maximum likelihood , particularly, Bayesian inversions models.","code":""},{"path":"/articles/pecanrtm.vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"The PEcAn RTM package","text":"easiest way install package via install_github devtools package. package relies modern (>= 2003) Fortran compiler, determined R installation. Unix systems, standard, R may specify particular compiler version don’t , resulting installation error. fix , simply add following system ~/R/Makevars file.","code":"install.packages(\"devtools\") library(devtools) install_github(\"ashiklom/pecan\", subdir = \"modules/rtm\") # Defaults to branch 'master'.  # For custom branches, add `ref = \"branchname\"` FC = gfortran"},{"path":[]},{"path":"/articles/pecanrtm.vignette.html","id":"simulating-reflectance","dir":"Articles","previous_headings":"Overview of features","what":"Simulating reflectance","title":"The PEcAn RTM package","text":"Available radiative transfer models called passing vector parameters. Similar models different versions (e.g. PROSPECT 4, 5, 5B) also “version” argument. models return matrix reflectance, transmittance, /absorption spectra (depending model) 1 nm resolution wavelength range 400 2500 nm. PROSPECT family models returns reflectance (column 1) transmittance (column 2) individual leaf function 4 6 parameters (depending version). Notice first last lines spectra printed, wavelength annotated side. RTM simulations package special matrix class spectra. class allows traditional subsetting via index single brackets ([]), well subsetting wavelength double brackets. package also provides special plotting (plot, matplot) combining (cbind) methods. Note cbind method automatically matches wavelengths, facilitates working spectra different wavelengths.  SAIL family models returns bidirectional (1), hemispherical directional (2), directional hemispherical (3), bidirectional hemispherical (4) reflectance factors canopy given set approximately 20 parameters. often coupled PROSPECT model PRO4SAIL. (, note return type spectra, leads matplot automatically put wavelengths x axis.)  example illustrates use defparam get default parameters particular model. Similarly, model.list data.frame containing currently available models.","code":"library(PEcAnRTM) ##  ## Attaching package: 'PEcAnRTM' ## The following object is masked from 'package:graphics': ##  ##     matplot wl <- 400:2500 params <- c(   \"N\" = 1.4, \"Cab\" = 40, \"Car\" = 15,   \"Cbrown\" = 0.5, \"Cw\" = 0.002, \"Cm\" = 0.004 )  p4 <- prospect(params[c(-3, -4)], version = 4) p4 ##     reflectance transmittance ## 400  0.04099898  0.0001814716 ## 401  0.04103723  0.0001699630 ## 402  0.04106248  0.0001575602 ## 403  0.04111370  0.0001452140 ## 404  0.04120401  0.0001348522 ## ... ##      reflectance transmittance ## 2496   0.1422667     0.2801837 ## 2497   0.1417965     0.2792691 ## 2498   0.1420623     0.2795135 ## 2499   0.1413868     0.2782765 ## 2500   0.1418849     0.2788870 class(p4) ## [1] \"spectra\" \"matrix\" p4[1:50, 1] ##     reflectance ## 400  0.04099898 ## 401  0.04103723 ## 402  0.04106248 ## 403  0.04111370 ## 404  0.04120401 ## ... ##     reflectance ## 445  0.04545556 ## 446  0.04542921 ## 447  0.04540287 ## 448  0.04537665 ## 449  0.04533726 p4[[500:520, 2]] ##     transmittance ## 500   0.008937186 ## 501   0.010279518 ## 502   0.011772740 ## 503   0.013438540 ## 504   0.015276985 ## ... ##     transmittance ## 516    0.05336301 ## 517    0.05776873 ## 518    0.06224375 ## 519    0.06679217 ## 520    0.07136411 p5 <- prospect(params[-4], version = 5) p5b <- prospect(params, version = \"5B\") p_multi <- cbind(p4, p5, p5b) matplot(p_multi[, c(1, 3, 5)], lty = 1:3, col = 2, ylim = c(0, 1)) matplot(1 - p_multi[, c(2, 4, 6)], lty = 1:3, col = 3,  add = TRUE) legend(\"topright\", c(\"Reflectance\", \"Transmittance\"), col=c(2, 3), lty = 1) legend(\"top\", c(\"4\", \"5\", \"5B\"), lty = 1:3) sail.params <- defparam(\"pro4sail\") print(sail.params) ##        N      Cab      Car   Cbrown       Cw       Cm    LIDFa    LIDFb  ##    1.500   40.000    8.000    0.000    0.010    0.009   -0.350   -0.150  ## TypeLIDF      LAI        q      tts      tto      psi    psoil  ##    1.000    3.000    0.010   30.000   10.000    0.000    1.000 p4s <- pro4sail(sail.params) matplot(p4s, xlab=\"Wavelength (nm)\", ylab=\"Reflectance\") legend(\"topright\", as.character(1:4), col=1:4, lty=1:4) print(model.list) ##          modname modcode         fullname ## 1     prospect_d    1153       PROSPECT D ## 2    prospect_5b    1152      PROSPECT 5B ## 3     prospect_5    1151       PROSPECT 5 ## 4     prospect_4    1141       PROSPECT 4 ## 5       pro4sail    2111         PRO4SAIL ## 6      pro4saild    2113        PRO4SAILD ##                                                                          par.names ## 1                                                     N Cab Car Canth Cbrown Cw Cm ## 2                                                           N Cab Car Cbrown Cw Cm ## 3                                                                  N Cab Car Cw Cm ## 4                                                                      N Cab Cw Cm ## 5            N Cab Car Cbrown Cw Cm LIDFa LIDFb TypeLIDF_r LAI q tts tto psi psoil ## 6      N Cab Car Canth Cbrown Cw Cm LIDFa LIDFb TypeLIDF_r LAI q tts tto psi psoil ##                                                                                                                         par.default ## 1                                                                              N=1.5 Cab=40 Car=8 Canth=8 Cbrown=0 Cw=0.01 Cm=0.009 ## 2                                                                                      N=1.5 Cab=40 Car=8 Cbrown=0 Cw=0.01 Cm=0.009 ## 3                                                                                               N=1.5 Cab=40 Car=8 Cw=0.01 Cm=0.009 ## 4                                                                                                     N=1.5 Cab=40 Cw=0.01 Cm=0.009 ## 5          N=1.5 Cab=40 Car=8 Cbrown=0 Cw=0.01 Cm=0.009 LIDFa=-0.35 LIDFb=-0.15 TypeLIDF=1 LAI=3 q=0.01 tts=30 tto=10 psi=0 psoil=1 ## 6  N=1.5 Cab=40 Car=8 Canth=1 Cbrown=0 Cw=0.01 Cm=0.009 LIDFa=-0.35 LIDFb=-0.15 TypeLIDF=1 LAI=3 q=0.01 tts=30 tto=10 psi=0 psoil=1"},{"path":"/articles/pecanrtm.vignette.html","id":"inversion","dir":"Articles","previous_headings":"Overview of features","what":"Inversion","title":"The PEcAn RTM package","text":"novel feature package ability perform Bayesian inversion Radiative Transfer Model. several advantages Bayesian approach: Parameter uncertainty: output Bayesian analysis full joint probability distribution model parameters, includes robust estimate uncertainy covariance parameters. Prior knowledge: previous, independent estimates parameters available, can used inform model. Partitioning variability: Random effects models provide powerful framework understanding sources variability uncertainty data set. inversion can performed using invert.auto function, uses Metropolis Hastings MCMC algorithm invert arbitrary model. lot configuration options invert.auto, recommended way perform inversion start default settings list, provided package . following sample, demonstrate default inversion PROSPECT model. model inverted , case, just one-line call PROSPECT 5 model params vector. returns vector reflectance values. requirement “model” output long length (number rows) observation vector (matrix). case, PROSPECT model returns 2101 reflectance values, observation also many points. recommended way set settings start default object modify . example, following block, reduce length run make go little faster. threshold = ... sets maximum value multivariate Gelman Diagnostic used assess convergence – defaults 1.1, set higher demonstrative purposes). full list inversion options . See documentation invert.auto full description . Now, load test data (Acer rubrum leaves (testspec_ACRU, accessible data(testspec)).  perform inversion, just pass observation matrix inversion settings invert.auto. quiet = TRUE suppresses progress bar, done clean knitted document. also set parallel = FALSE vignette rebuilt shared hardware one processor might available; runs machine, probably want set TRUE use cores machine. output invert.auto list two objects: list summary statistics parameter mcmc.list object samples diagnostic purposes calculation summary statistics.","code":"invert.options <- default.settings.prospect invert.options$model ## function (params, seed = NULL)  ## prospect(params, 5)[, 1] ## <bytecode: 0x559f1d7656e0> ## <environment: namespace:PEcAnRTM> invert.options$nchains <- 2      # Number of MCMC chains invert.options$ngibbs.max <- 5e4 # Maximum number of iterations per chain (fails if no convergence by then) invert.options$do.lsq <- TRUE    # Initialize with results from a fast least-squares optimization algorithm invert.options$threshold <- 1.3  # Maximum value for Gelman diagnostic names(invert.options) ##  [1] \"model\"          \"inits.function\" \"prior.function\" \"param.mins\"     ##  [5] \"param.maxs\"     \"ngibbs\"         \"nchains\"        \"burnin\"         ##  [9] \"ngibbs.max\"     \"ngibbs.min\"     \"ngibbs.step\"    \"return.samples\" ## [13] \"target\"         \"do.lsq\"         \"save.samples\"   \"quiet\"          ## [17] \"adapt\"          \"adj_min\"        \"threshold\" data(testspec) observed <- testspec_ACRU[,1] plot(wl, observed, xlab=\"Wavelength\", ylab=\"Reflectance\", type='l') if(file.exists(\"inversion.output.rds\")){     inversion.output <- readRDS(\"inversion.output.rds\") } else {     inversion.output <- invert.auto(observed = observed,                                     invert.options = invert.options,                                     quiet = TRUE,                                     parallel = FALSE)     saveRDS(inversion.output, \"inversion.output.rds\") } ## Loading required namespace: minpack.lm ## [1] \"Running chain 1 of 2\" ## Loading required namespace: MASS ## [1] \"Running chain 2 of 2\" ## [1] \"The following parameters did not converge: Car (1.306), Cw (1.573)\" ## [1] \"Converged with all Gelman diag <= 1.001\" ##           N      Cab      Car       Cw       Cm residual PSRF N > 1.10 ## 46 1.034063 1.047655 1.174796 1.304651 1.001482 1.075235         FALSE ## 47 1.044040 1.042420 1.122026 1.243426 1.008934 1.057692         FALSE ## 48 1.037438 1.025795 1.120370 1.199240 1.012572 1.055102         FALSE ## 49 1.016022 1.020189 1.023890 1.144805 1.005341 1.053004         FALSE ## 50 1.007550 1.004625 1.003052 1.130626 1.001551 1.050658         FALSE ## 51 1.006932 1.001220 1.001875 1.159131 1.003434 1.049637         FALSE ##    PSRF Cab > 1.10 PSRF Car > 1.10 PSRF Cw > 1.10 PSRF Cm > 1.10 ## 46           FALSE            TRUE           TRUE          FALSE ## 47           FALSE            TRUE           TRUE          FALSE ## 48           FALSE            TRUE           TRUE          FALSE ## 49           FALSE           FALSE           TRUE          FALSE ## 50           FALSE           FALSE           TRUE          FALSE ## 51           FALSE           FALSE           TRUE          FALSE ##    PSRF residual > 1.10 ## 46                FALSE ## 47                FALSE ## 48                FALSE ## 49                FALSE ## 50                FALSE ## 51                FALSE ## [1] \"Converged with all Gelman diag <= 1.000\" par(mfrow=c(2,2)) plot(inversion.output$samples, auto.layout=FALSE) par(mfrow=c(1,1)) samples.mat <- as.matrix(inversion.output$samples)[-(2000:0),1:5] colnames(samples.mat) <- params.prospect5 pairs(samples.mat, pch=\".\") means <- unlist(inversion.output$results[grep(\"mu\", names(inversion.output$results))])[1:5] prospect.sim <- prospect(means, 5)[,1]  # reflectance  plot(wl, observed, type='l', col=1, xlab=\"wavelength (nm)\", ylab=\"reflectance\") lines(wl, prospect.sim, type='l', col=2) legend(\"topright\", c(\"observed\", \"predicted\"), lty=1, col=1:2)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mike Dietze. Author. Shawn Serbin. Author. Alexey Shiklomanov. Author, maintainer. University Illinois, NCSA. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dietze M, Serbin S, Shiklomanov (2025). PEcAnRTM: PEcAn Functions Used Radiative Transfer Modeling. R package version 1.9.0, https://pecanproject.github.io.","code":"@Manual{,   title = {PEcAnRTM: PEcAn Functions Used for Radiative Transfer Modeling},   author = {Mike Dietze and Shawn Serbin and Alexey Shiklomanov},   year = {2025},   note = {R package version 1.9.0},   url = {https://pecanproject.github.io}, }"},{"path":"/index.html","id":"pecan-radiative-transfer-modeling-module","dir":"","previous_headings":"","what":"PEcAn Functions Used for Radiative Transfer Modeling","title":"PEcAn Functions Used for Radiative Transfer Modeling","text":"Corresponding author Alexey Shiklomanov Dept. Earth Environment Boston Universityashiklom@bu.edu","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"PEcAn Functions Used for Radiative Transfer Modeling","text":"Easiest way install via install_github devtools package. want specific branch, install_github(..., ref=\"<branch>\"). , able load package typical R session. NOTE: OS X systems, automatic specification gfortran fail, causing installation abort. fix issue, need add something like following ~/.R/Makevars file. information, see vignette (vignettes/pecanrtm.vignettes.Rmd).","code":"devtools::install_github(\"PecanProject/pecan\", subdir=\"modules/rtm\", ref='develop') FC = gfortran"},{"path":"/reference/EDR.html","id":null,"dir":"Reference","previous_headings":"","what":"ED radiative transfer module (EDR) wrapper function — EDR","title":"ED radiative transfer module (EDR) wrapper function — EDR","text":"function provides convenient way call ED radiative transfer module (EDR, simulates full spectral return ED patch given point time) directly R.","code":""},{"path":"/reference/EDR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ED radiative transfer module (EDR) wrapper function — EDR","text":"","code":"EDR(   img_path,   ed2in_path,   spectra_list,   trait.values,   soil_reflect_path = system.file(\"extdata\", \"soil_reflect_par.dat\", package =     \"PEcAnRTM\"),   wood_reflect_path = system.file(\"extdata\", \"wood_reflect_par.dat\", package =     \"PEcAnRTM\"),   par.wl = 400:2499,   nir.wl = 2500,   edr_exe_path = NULL,   output.path = dirname(normalizePath(ed2in_path, mustWork = TRUE)),   settings = list(model = list(revision = \"git\", config.header = NULL)),   singularity_args = list(),   clean = FALSE,   stderr = TRUE,   verbose_error = TRUE,   ... )"},{"path":"/reference/EDR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ED radiative transfer module (EDR) wrapper function — EDR","text":"img_path Path Singularity container (usually .simg file) ed2in_path Path ED2IN file. spectra_list List spectral data matrices. Names must exactly match PFTs given trait.values. item must matrix reflectance (labeled 'R' 'reflectance') transmittance (labeled 'T' 'transmittance') values. matrix class spectra (see spectra()), must also column wavelength values (labeled 'wl'). matrix returned default versions PROSPECT package. trait.values Named, hierarchical list trait values generating config.xml file. Names must PFTs, must exactly match names spectra_list. soil_reflect_path Path soil reflectance file (defaults spectra package extdata) wood_reflect_path Path wood reflectance file (defaults spectra package extdata) par.wl Vector wavelengths defining PAR region nir.wl Vector wavelengths defining NIR region edr_exe_path img_path NULL, full path EDR executable. Ignored otherwise. output.path Directory execute run. Defaults dirname(ed2in_path). settings PEcAn settings list. Default list(model = list(revision = \"git\", config.header = NULL)). singularity_args Additional arguments passed singularity run () clean Logical. TRUE, remove files generated function (e.g. cloned history file, ED2IN, output HDF files). stderr Logical. TRUE (default), internalize system2 results R character vector. TRUE recommended allows EDR check execution run quietly. verbose_error Logical. TRUE (default), spit full ED EDR execution fails. ... Additional arguments system2","code":""},{"path":"/reference/EDR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ED radiative transfer module (EDR) wrapper function — EDR","text":"Alexey Shiklomanov","code":""},{"path":"/reference/EDR.preprocess.history.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess history file for EDR — EDR.preprocess.history","title":"Preprocess history file for EDR — EDR.preprocess.history","text":"Locate history file based path prefix, copy specified output directory, rename correct time.","code":""},{"path":"/reference/EDR.preprocess.history.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess history file for EDR — EDR.preprocess.history","text":"","code":"EDR.preprocess.history(   history.path,   output.path,   datetime,   history.prefix = \"history\" )"},{"path":"/reference/EDR.preprocess.history.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess history file for EDR — EDR.preprocess.history","text":"history.path Path directory containing history file. output.path Directory execute run. datetime POSIX date time run history.prefix String describing history file prefix history.path. Default = 'history'","code":""},{"path":"/reference/burnin.thin.html","id":null,"dir":"Reference","previous_headings":"","what":"Burn-in and thinning of MCMC samples — burnin.thin","title":"Burn-in and thinning of MCMC samples — burnin.thin","text":"Burn-thinning MCMC samples","code":""},{"path":"/reference/burnin.thin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Burn-in and thinning of MCMC samples — burnin.thin","text":"","code":"burnin.thin(   samples,   target = 5000,   burnin.ratio = 2,   auto = TRUE,   burnin = NULL,   thin = NULL )"},{"path":"/reference/burnin.thin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Burn-in and thinning of MCMC samples — burnin.thin","text":"samples Matrix MCMC samples target Target number samples (default = 5000). applicable auto=TRUE. burnin.ratio Fraction samples burn-; .e. 2 means remove first 1/2 samples, 3 means 1/3, etc. (default = 2). applicable auto=TRUE. auto Whether perform automatic burnin thin based target number samples. burnin Number samples discard burnin (auto must FALSE) thin Thinning interval (auto must FALSE)","code":""},{"path":"/reference/cbind.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine spectra by wavelength — cbind.spectra","title":"Combine spectra by wavelength — cbind.spectra","text":"Combine spectra wavelength","code":""},{"path":"/reference/cbind.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine spectra by wavelength — cbind.spectra","text":"","code":"# S3 method for class 'spectra' cbind(...)"},{"path":"/reference/cbind.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine spectra by wavelength — cbind.spectra","text":"... Spectra combine","code":""},{"path":"/reference/check.convergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check convergence of multiple MCMC chains — check.convergence","title":"Check convergence of multiple MCMC chains — check.convergence","text":"Uses Gelman multivariate Gelman-Rubin diagnostic check multiple MCMC chains converged","code":""},{"path":"/reference/check.convergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check convergence of multiple MCMC chains — check.convergence","text":"","code":"check.convergence(jags_out, threshold = 1.1, verbose = TRUE, ...)"},{"path":"/reference/check.convergence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check convergence of multiple MCMC chains — check.convergence","text":"jags_out mcmc.list object (coda package) containing samples MCMC chains. threshold Gelman-Rubin diagnostic parameter threshold. Default = 1.1 verbose TRUE, print convergence result. Default = TRUE ... Additional arguments gelman.diag (coda package)","code":""},{"path":"/reference/check.convergence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check convergence of multiple MCMC chains — check.convergence","text":"List length 3 containing following: * convergence: Logical. Whether convergence achieved. * diagnostics: Numerical value Gelman-Rubin diagnostics parameter multivariate diagnostic * error: Logical. Whether error occured Gelman-Rubin calculation.","code":""},{"path":"/reference/default.settings.prospect.html","id":null,"dir":"Reference","previous_headings":"","what":"Defult inversion settings for PROSPECT 5 models — default.settings.prospect","title":"Defult inversion settings for PROSPECT 5 models — default.settings.prospect","text":"Default settings PROSPECT inversion","code":""},{"path":"/reference/default.settings.prospect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defult inversion settings for PROSPECT 5 models — default.settings.prospect","text":"","code":"default.settings.prospect"},{"path":"/reference/default.settings.prospect.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Defult inversion settings for PROSPECT 5 models — default.settings.prospect","text":"object class list length 18.","code":""},{"path":"/reference/defparam.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default parameters — defparam","title":"Get default parameters — defparam","text":"Extract default parameter values model.list","code":""},{"path":"/reference/defparam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default parameters — defparam","text":"","code":"defparam(modname)"},{"path":"/reference/defparam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default parameters — defparam","text":"modname Model name. Must match modname model.list","code":""},{"path":"/reference/defparam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default parameters — defparam","text":"Named vector default parameter values","code":""},{"path":"/reference/dtnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated normal distribution density — dtnorm","title":"Truncated normal distribution density — dtnorm","text":"Calculates log density univariate truncated normal variable","code":""},{"path":"/reference/dtnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated normal distribution density — dtnorm","text":"","code":"dtnorm(x, mu, sd, MIN)"},{"path":"/reference/dtnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated normal distribution density — dtnorm","text":"x random variable mu mean parameter distribution; NOTE equal mean sd standard deviation parameter distribution MIN Value truncation takes place","code":""},{"path":"/reference/dtnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated normal distribution density — dtnorm","text":"Numeric; log density distribution, -1e15 x < MIN","code":""},{"path":"/reference/dtnorm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Truncated normal distribution density — dtnorm","text":"Alexey Shiklomanov","code":""},{"path":"/reference/fortran_data_module.html","id":null,"dir":"Reference","previous_headings":"","what":"List to FORTRAN data module — fortran_data_module","title":"List to FORTRAN data module — fortran_data_module","text":"Convert R list Fortran /data/ module block","code":""},{"path":"/reference/fortran_data_module.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List to FORTRAN data module — fortran_data_module","text":"","code":"fortran_data_module(dat, types, modname, fname = paste0(modname, \".f90\"))"},{"path":"/reference/fortran_data_module.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List to FORTRAN data module — fortran_data_module","text":"dat Named list object creating module. List names used initialize FORTRAN variabiles. types Character vector FORTAN types (e.g. real*8, integer) modname Name module. suggest format 'MOD_yourmodname'. fname Output file name. Defaults 'yourmodname.f90'","code":""},{"path":"/reference/fortran_data_module.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List to FORTRAN data module — fortran_data_module","text":"models large constants (e.g. absorption features PROSPECT model), may preferable store FORTRAN90 modules. However, manually creating formatting files tedious. script allows automatically generate module files R lists. automatically interprets object lengths array dimensions (vectors supported right now – higher dimension arrays may future) splits long data rows 10. Currently, numeric data supported (.e. characters).","code":""},{"path":"/reference/fortran_data_module.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List to FORTRAN data module — fortran_data_module","text":"Alexey Shiklomanov","code":""},{"path":"/reference/fortran_data_module.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List to FORTRAN data module — fortran_data_module","text":"","code":"w <- 3.2       x <- 1:5       y <- 6:15       z <- seq(exp(1), pi, length.out=42)       l <- list(x=x, y=y, z=z) ## NOTE that names must be explicitly declared       l.types <- c('real','integer', 'real*4', 'real*8')       fortran_data_module(l, l.types, 'testmod',         file.path(tempdir(), \"testmod.f90\"))        x <- runif(10)       y <- rnorm(10)       z <- rgamma(10, 3)       d <- data.frame(x,y,z) ## NOTE that data.frames are just named lists       d.types <- rep('real*8', ncol(d))       fortran_data_module(d, d.types, 'random',         file.path(tempdir(), \"random.f90\"))"},{"path":"/reference/foursail.html","id":null,"dir":"Reference","previous_headings":"","what":"SAIL model — foursail","title":"SAIL model — foursail","text":"R wrapper 4SAIL model","code":""},{"path":"/reference/foursail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SAIL model — foursail","text":"","code":"foursail(refl, tran, rsoil, param)"},{"path":"/reference/foursail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SAIL model — foursail","text":"refl input leaf reflectance 400-2500nm (can measured modeled) tran input leaf transmittance 400-2500nm (can measured modeled) rsoil input soil reflectance spectra 400-2500nm (can measured modeled) param Vector SAIL parameter values: * LIDFa: Leaf angle distribution function - parameter * LIDFb: Leaf angle distribution function - parameter b * TypeLIDF: Leaf angle distribution function type (1 2) * LAI: Leaf area index * q: Hot spot effect parameter * tts: Solar zenith angle * tto: Observer zenith angle * psi: Sun-sensor azimuth angle","code":""},{"path":"/reference/foursail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SAIL model — foursail","text":"Spectra matrix (see spectra()) (2101 x 4) reflectance factors wavelengths 400 2500nm: * bi-hemispherical reflectance (rddt) * hemispherical directional (rsdt) * directional hemispherical (rdot) * bi-directional (rsot)","code":""},{"path":"/reference/foursail.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SAIL model — foursail","text":"Shawn Serbin Alexey Shiklomanov","code":""},{"path":"/reference/generalized_plate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized plate model — generalized_plate_model","title":"Generalized plate model — generalized_plate_model","text":"fundamental physical model underlying PROSPECT family leaf RTMs.","code":""},{"path":"/reference/generalized_plate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized plate model — generalized_plate_model","text":"","code":"generalized_plate_model(k, refractive, N)"},{"path":"/reference/generalized_plate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized plate model — generalized_plate_model","text":"k Specific absorption coefficient (400 - 2500nm) refractive Refractive index (400 - 2500nm) N Effective number mesophyll layers (see prospect())","code":""},{"path":"/reference/generate.noise.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate autocorrelated spectral noise — generate.noise","title":"Generate autocorrelated spectral noise — generate.noise","text":"Generate autocorrelated spectral noise","code":""},{"path":"/reference/generate.noise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate autocorrelated spectral noise — generate.noise","text":"","code":"generate.noise(n = 2101, sigma = 1e-04, fw = 201, fsd = 6)"},{"path":"/reference/generate.noise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate autocorrelated spectral noise — generate.noise","text":"n Length output vector (default = 2101) sigma Gaussian noise standard deviation (default=1e-4) fw Filter width. coerced odd number even (default = 201). fsd Scaling factor filter standard deviation (default = 6)","code":""},{"path":"/reference/get.EDR.output.html","id":null,"dir":"Reference","previous_headings":"","what":"Read EDR output — get.EDR.output","title":"Read EDR output — get.EDR.output","text":"Read EDR output","code":""},{"path":"/reference/get.EDR.output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read EDR output — get.EDR.output","text":"","code":"get.EDR.output(path = getwd())"},{"path":"/reference/get.EDR.output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read EDR output — get.EDR.output","text":"path Path directory containing albedo_par/nir.dat files","code":""},{"path":"/reference/invert.auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Inversion with automatic convergence checking — invert.auto","title":"Inversion with automatic convergence checking — invert.auto","text":"Inversion automatic convergence checking","code":""},{"path":"/reference/invert.auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inversion with automatic convergence checking — invert.auto","text":"","code":"invert.auto(   observed,   invert.options,   return.samples = TRUE,   save.samples = NULL,   quiet = FALSE,   parallel = TRUE,   parallel.cores = NULL,   parallel.output = \"/dev/null\" )"},{"path":"/reference/invert.auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inversion with automatic convergence checking — invert.auto","text":"observed Vector, matrix, data frame (coerced matrix) observed values. spectral data, wavelengths rows spectra columns. Dimensions must align output model. invert.options Parameters related inversion. return.samples Include full samples list output. Default = TRUE. save.samples Save samples file inversion proceeds (useful debugging). NULL, save samples. Default = NULL. quiet Suppress progress bar status messages. Default=FALSE parallel Logical. Whether run multiple chains parallel multiple cores (default = TRUE). parallel.cores Number cores use parallelization. NULL (default), allocate one fewer detected number cores. parallel.output Filename (” stdout) printing parallel outputs. Use caution. Default = '/dev/null'.","code":""},{"path":"/reference/invert.auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inversion with automatic convergence checking — invert.auto","text":"List including results (summary statistics), samples (mcmc.list object, NA return.samples=FALSE), information.","code":""},{"path":"/reference/invert.auto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inversion with automatic convergence checking — invert.auto","text":"Performs inversion via invert.custom function multiple chains automatic convergence checking.  Convergence checks performed using multivariate Gelman-Rubin diagnostic. Parameters specific invert.auto described . remaining parameters, see invert.custom(). model – model inverted. R function takes params input returns one column observed (nrows ). Constants implicitly included . nchains – Number independent chains. inits.function – Function generating initial conditions. ngibbs.max – Maximum number total iterations (per chain). DEFAULT = 5e6 ngibbs.min – Minimum number total iterations (per chain). DEFAULT = 5000. ngibbs.step – Number iterations convergence checks. Default = 1000. run_first – Function run running sampling. Takes parallel inputs list containing runID, initial values, resume (NULL) argument. calculate.burnin – TRUE, use PEcAn.assim.batch::autoburnin function calculate burnin. Otherwise, assume burnin min(niter/2, iter_conv_check). threshold – Maximum value Gelman-Rubin diagnostic determining convergence. Default = 1.1","code":""},{"path":"/reference/invert.custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian inversion of a model — invert.custom","title":"Bayesian inversion of a model — invert.custom","text":"Performs inversion arbitrary model using modified Metropolis Hastings algorithm block sampling. may slightly slower implementation Fortran, much customizable, model can R function.","code":""},{"path":"/reference/invert.custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian inversion of a model — invert.custom","text":"","code":"invert.custom(   observed,   invert.options,   quiet = FALSE,   return.resume = FALSE,   runID = NULL )"},{"path":"/reference/invert.custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian inversion of a model — invert.custom","text":"observed Vector, matrix, data frame (coerced matrix) observed values. spectral data, wavelengths rows spectra columns. Dimensions must align output model. invert.options R list object containing inversion settings. See details. quiet Suppress progress bar status messages. Default=FALSE return.resume TRUE, return results list includes current Jump distribution (useful continuing ongoing run) acceptance rate. Default = FALSE. runID Run-unique ID. Useful parallel runs. Default=NULL","code":""},{"path":"/reference/invert.custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian inversion of a model — invert.custom","text":"inversion.options contains following: inits – Vector initial values model parameters inverted. ngibbs – Number MCMC iterations prior.function – Function use prior. take vector parameters input return single value – sum log-densities – output. param.mins – Vector minimum values inversion parameters param.maxs – Vector minimum values inversion parameters model – model inverted. R function takes params runID input returns one column observed (nrows ). Constants implicitly included . adapt – Number steps adapting covariance matrix (.e. adapt every 'n' steps). Default=100 adj_min – Minimum threshold rescaling Jump standard deviation. Default = 0.1. target – Target acceptance rate. Default=0.234, based recommendation multivariate block sampling Haario et al. 2001 .lsq – Perform least squares optimization first (see invert.lsq), use outputs initialize Metropolis Hastings. may improve mixing time, risks getting caught local minimum. Default=FALSE catch_error – TRUE (default), wrap model tryCatch prevent sampling termination model execution error.","code":""},{"path":"/reference/invert.custom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian inversion of a model — invert.custom","text":"Haario, Heikki; Saksman, Eero; Tamminen, Johanna.  adaptive Metropolis algorithm. Bernoulli 7 (2001), . 2, 223–242. http://projecteuclid.org/euclid.bj/1080222083.","code":""},{"path":"/reference/invert.lsq.html","id":null,"dir":"Reference","previous_headings":"","what":"Least squares model inversion — invert.lsq","title":"Least squares model inversion — invert.lsq","text":"Performs least-squares inversion arbitrary radiative transfer model (passed R function). inversion attempts minimize sum residual least squares modeled observed spectra via Levenberg-Marquardt algorithm (nls.lm function minpack.lm package).","code":""},{"path":"/reference/invert.lsq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Least squares model inversion — invert.lsq","text":"","code":"invert.lsq(observed, inits, model, lower = NULL, upper = NULL)"},{"path":"/reference/invert.lsq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Least squares model inversion — invert.lsq","text":"observed Vector observations (e.g. reflectance spectrum). inits Vector initial conditions parameters. model R function calls RTM returns error minimized. sure include constants . lower Lower bounds parameters (default=NULL, means -Inf). upper Upper bounds parameters (default=NULL, means +Inf).","code":""},{"path":"/reference/invert.lsq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Least squares model inversion — invert.lsq","text":"Alexey Shiklomanov","code":""},{"path":"/reference/invert_bt.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Bayesian inversion using BayesianTools package — invert_bt","title":"Perform Bayesian inversion using BayesianTools package — invert_bt","text":"Use samplers BayesianTools package fit models data. Like invert.auto, continue run convergence achieved (based Gelman diagnostic) result enough samples (specified user; see Details).","code":""},{"path":"/reference/invert_bt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Bayesian inversion using BayesianTools package — invert_bt","text":"","code":"invert_bt(observed, model, prior, custom_settings = list(), loglike = NULL)"},{"path":"/reference/invert_bt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Bayesian inversion using BayesianTools package — invert_bt","text":"observed Vector observations. Ignored loglike NULL. model Function called log-likelihood. Must function(params) return vector equal length(observed) nrow(observed). Ignored loglike NULL. prior BayesianTools prior object. custom_settings Nested settings list. See Details. loglike Custom log likelihood function. NULL, use rtm_loglike() provided observed model.","code":""},{"path":"/reference/invert_bt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Bayesian inversion using BayesianTools package — invert_bt","text":"custom_settings list lists, containing following: common – BayesianTools settings common initial subsequent samples. init – BayesianTools settings just first round sampling. common initial number iterations, minimum expected convergence. loop – BayesianTools settings iterations inside convergence checking loop. commonly setting smaller iteration count init. – Miscellaneous (non-BayesianTools) settings, including: sampler – String describing sampler use. Default DEzs use_mpsrf – Use multivariate PSRF check convergence. Default FALSE may excessively conservative diagnostic. min_samp – Minimum number samples burnin stopping. Default 5000. max_iter – Maximum total number iterations. Default 1e6. lag.max – Maximum lag use autocorrelation normalization. Default 10 * log10(n) (stats::acf function). save_progress – File name saving samples loop iterations. NULL (default), save progress samples. threshold – Threshold Gelman PSRF convergence diagnostic. Default 1.1. verbose_loglike – Diagnostic messages log likelihood output. Default TRUE. See BayesianTools sampler documentation can go BayesianTools settings lists.","code":""},{"path":"/reference/load.from.name.html","id":null,"dir":"Reference","previous_headings":"","what":"Load object from an RData file — load.from.name","title":"Load object from an RData file — load.from.name","text":"Load object RData file","code":""},{"path":"/reference/load.from.name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load object from an RData file — load.from.name","text":"","code":"load.from.name(filename, filepath = \".\")"},{"path":"/reference/load.from.name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load object from an RData file — load.from.name","text":"filename Full name (without path!) RData file filepath Path RData file (default='.')","code":""},{"path":"/reference/lognorm.mu.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for default priors Lognormal mean parameters — lognorm.mu","title":"Functions for default priors Lognormal mean parameters — lognorm.mu","text":"Functions default priors Lognormal mean parameters","code":""},{"path":"/reference/lognorm.mu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for default priors Lognormal mean parameters — lognorm.mu","text":"","code":"lognorm.mu(mean, sd)"},{"path":"/reference/lognorm.mu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for default priors Lognormal mean parameters — lognorm.mu","text":"mean Sample mean sd Sample standard deviation","code":""},{"path":"/reference/lognorm.sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"Lognormal sigma parameter — lognorm.sigma","title":"Lognormal sigma parameter — lognorm.sigma","text":"Lognormal sigma parameter","code":""},{"path":"/reference/lognorm.sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lognormal sigma parameter — lognorm.sigma","text":"","code":"lognorm.sigma(mean, sd)"},{"path":"/reference/lognorm.sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lognormal sigma parameter — lognorm.sigma","text":"mean Sample mean sd Sample standard deviation","code":""},{"path":"/reference/matplot.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Matplot default method — matplot.default","title":"Matplot default method — matplot.default","text":"Matplot default method","code":""},{"path":"/reference/matplot.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matplot default method — matplot.default","text":"","code":"# Default S3 method matplot(...)"},{"path":"/reference/matplot.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matplot default method — matplot.default","text":"... arguments passed matplot","code":""},{"path":"/reference/matplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Matplot generic method — matplot","title":"Matplot generic method — matplot","text":"Matplot generic method","code":""},{"path":"/reference/matplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matplot generic method — matplot","text":"","code":"matplot(...)"},{"path":"/reference/matplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matplot generic method — matplot","text":"... arguments passed methods","code":""},{"path":"/reference/matplot.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple spectra on same graph — matplot.spectra","title":"Plot multiple spectra on same graph — matplot.spectra","text":"Plot multiple spectra graph","code":""},{"path":"/reference/matplot.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple spectra on same graph — matplot.spectra","text":"","code":"# S3 method for class 'spectra' matplot(spectra, ...)"},{"path":"/reference/matplot.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple spectra on same graph — matplot.spectra","text":"spectra Vector (length = length(wavelengths)) matrix (ncol = length(wavelengths)) ... Additional arguments matplot","code":""},{"path":"/reference/neff.html","id":null,"dir":"Reference","previous_headings":"","what":"Effective sample size — neff","title":"Effective sample size — neff","text":"Calculate effective sample size vector based autocorrelation.","code":""},{"path":"/reference/neff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effective sample size — neff","text":"","code":"neff(x, ...)"},{"path":"/reference/neff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effective sample size — neff","text":"x vector time series ... additional arguments passed methods","code":""},{"path":"/reference/params.prospect4.html","id":null,"dir":"Reference","previous_headings":"","what":"PROSPECT 4 parameters — params.prospect4","title":"PROSPECT 4 parameters — params.prospect4","text":"Shortcut lists PROSPECT parameter names","code":""},{"path":"/reference/params.prospect4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PROSPECT 4 parameters — params.prospect4","text":"","code":"params.prospect4"},{"path":"/reference/params.prospect4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PROSPECT 4 parameters — params.prospect4","text":"object class character length 4.","code":""},{"path":"/reference/params.prospect5.html","id":null,"dir":"Reference","previous_headings":"","what":"PROSPECT 5 parameters — params.prospect5","title":"PROSPECT 5 parameters — params.prospect5","text":"PROSPECT 5 parameters","code":""},{"path":"/reference/params.prospect5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PROSPECT 5 parameters — params.prospect5","text":"","code":"params.prospect5"},{"path":"/reference/params.prospect5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PROSPECT 5 parameters — params.prospect5","text":"object class character length 5.","code":""},{"path":"/reference/params.prospect5b.html","id":null,"dir":"Reference","previous_headings":"","what":"PROSPECT 5B parameters — params.prospect5b","title":"PROSPECT 5B parameters — params.prospect5b","text":"PROSPECT 5B parameters","code":""},{"path":"/reference/params.prospect5b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PROSPECT 5B parameters — params.prospect5b","text":"","code":"params.prospect5b"},{"path":"/reference/params.prospect5b.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PROSPECT 5B parameters — params.prospect5b","text":"object class character length 6.","code":""},{"path":"/reference/params.prospectd.html","id":null,"dir":"Reference","previous_headings":"","what":"PROSPECT D parameters — params.prospectd","title":"PROSPECT D parameters — params.prospectd","text":"PROSPECT D parameters","code":""},{"path":"/reference/params.prospectd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PROSPECT D parameters — params.prospectd","text":"","code":"params.prospectd"},{"path":"/reference/params.prospectd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PROSPECT D parameters — params.prospectd","text":"object class character length 7.","code":""},{"path":"/reference/params2edr.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert named parameter vector to EDR-compatible inputs — params2edr","title":"Convert named parameter vector to EDR-compatible inputs — params2edr","text":"Creates nested list whose components suitable passing EDR.","code":""},{"path":"/reference/params2edr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert named parameter vector to EDR-compatible inputs — params2edr","text":"","code":"params2edr(params, sep = \".\", prospect = TRUE, version = 5)"},{"path":"/reference/params2edr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert named parameter vector to EDR-compatible inputs — params2edr","text":"params Named parameter vector sep Separator PFT name trait name. Must single character (default = \".\"). prospect Logical. TRUE (default), scan PROSPECT traits pass PROSPECT. version PROSPECT version","code":""},{"path":"/reference/params2edr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert named parameter vector to EDR-compatible inputs — params2edr","text":"List containing spectra_list trait.values, objects needed EDR.","code":""},{"path":"/reference/params2edr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert named parameter vector to EDR-compatible inputs — params2edr","text":"prospect = TRUE, parameters prefixed prospect_ passed prospect specified version, parameters passed trait.values. regular expression defining separation greedy, .e. temperate.Early_Hardwood.SLA separate temperate.Early_Hardwood SLA (assuming default sep = \".\"). Therefore, crucial trait names contain sep characters (neither ED PROSPECT parameters anyway). problem, use alternate separator (e.g. |). Note using sep = \".\" allows function directly invert default behavior unlist. , calling unlist(params2edr(params, prospect = FALSE)$trait.values) return input vector trait values. makes unlist convenient way go trait.values list properly formatted params vector. unused ED parameters config.xml ignored, PROSPECT parameters saved trait.values object well, may useful debugging.","code":""},{"path":"/reference/params2edr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert named parameter vector to EDR-compatible inputs — params2edr","text":"Alexey Shiklomanov","code":""},{"path":"/reference/plot.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spectra vs. wavelength — plot.spectra","title":"Plot spectra vs. wavelength — plot.spectra","text":"Plot spectra vs. wavelength","code":""},{"path":"/reference/plot.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spectra vs. wavelength — plot.spectra","text":"","code":"# S3 method for class 'spectra' plot(spectra, type = \"l\", ...)"},{"path":"/reference/plot.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spectra vs. wavelength — plot.spectra","text":"spectra Vector (length = length(wavelengths)) matrix (ncol = length(wavelengths)) type plot style, e.g. \"l\" lines, \"b\" lines points ... Additional arguments plot","code":""},{"path":"/reference/print.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for spectra S3 class — print.spectra","title":"Print method for spectra S3 class — print.spectra","text":"Print method spectra S3 class","code":""},{"path":"/reference/print.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for spectra S3 class — print.spectra","text":"","code":"# S3 method for class 'spectra' print(spectra, n = 10, ...)"},{"path":"/reference/print.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for spectra S3 class — print.spectra","text":"spectra Object class spectra n Max number rows print (show first n/2 last n/2 rows) ... Additional arguments print","code":""},{"path":"/reference/print_results_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Neatly print inversion results summary — print_results_summary","title":"Neatly print inversion results summary — print_results_summary","text":"Neatly print inversion results summary","code":""},{"path":"/reference/print_results_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neatly print inversion results summary — print_results_summary","text":"","code":"print_results_summary(output)"},{"path":"/reference/print_results_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neatly print inversion results summary — print_results_summary","text":"output Output invert.auto","code":""},{"path":"/reference/print_results_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Neatly print inversion results summary — print_results_summary","text":"Alexey Shiklomanov","code":""},{"path":"/reference/prior.defaultvals.prospect.html","id":null,"dir":"Reference","previous_headings":"","what":"Default prior parameters for PROSPECT models — prior.defaultvals.prospect","title":"Default prior parameters for PROSPECT models — prior.defaultvals.prospect","text":"Default prior parameters PROSPECT models","code":""},{"path":"/reference/prior.defaultvals.prospect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default prior parameters for PROSPECT models — prior.defaultvals.prospect","text":"","code":"prior.defaultvals.prospect(sd.inflate = 3)"},{"path":"/reference/prior.defaultvals.prospect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default prior parameters for PROSPECT models — prior.defaultvals.prospect","text":"sd.inflate Standard deviation multiplier (default = 3)","code":""},{"path":"/reference/priorfunc.prospect.html","id":null,"dir":"Reference","previous_headings":"","what":"Default PROSPECT 5 prior function — priorfunc.prospect","title":"Default PROSPECT 5 prior function — priorfunc.prospect","text":"Default PROSPECT 5 prior function","code":""},{"path":"/reference/priorfunc.prospect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default PROSPECT 5 prior function — priorfunc.prospect","text":"","code":"priorfunc.prospect(pmu, psigma)"},{"path":"/reference/priorfunc.prospect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default PROSPECT 5 prior function — priorfunc.prospect","text":"pmu Lognormal mu parameter psigma Lognormal sigma parameter","code":""},{"path":"/reference/priorfunc.prospect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default PROSPECT 5 prior function — priorfunc.prospect","text":"Assumes lognormal distribution parameters. NOTE prior N shifted 1.","code":""},{"path":"/reference/pro2s.html","id":null,"dir":"Reference","previous_headings":"","what":"Coupled PROSPECT-Two-stream model — pro2s","title":"Coupled PROSPECT-Two-stream model — pro2s","text":"Coupled PROSPECT-Two-stream model","code":""},{"path":"/reference/pro2s.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coupled PROSPECT-Two-stream model — pro2s","text":"","code":"pro2s(param, prospect.version = 5)"},{"path":"/reference/pro2s.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coupled PROSPECT-Two-stream model — pro2s","text":"param Model parameters, following order: N, Cab, (Car, Cbrown), Cw, Cm, solar zenith angle, LAI, soil_moisture prospect.version Version PROSPECT use (4, 5, '5B'; default=5)","code":""},{"path":"/reference/pro2s.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coupled PROSPECT-Two-stream model — pro2s","text":"Spectra matrix (see spectra()) wavelengths 400 2500nm containing following columns: alpha.c – Direct (\"collimated\") reflectance alpha.– Diffuse (\"isotropic\") reflectance Tc – Direct transmittance background Ti – Diffuse reflectance background Ac – Direct absorbance canopy Ai – Diffuse absorbance canopy","code":""},{"path":"/reference/pro4sail.html","id":null,"dir":"Reference","previous_headings":"","what":"PRO4SAIL model — pro4sail","title":"PRO4SAIL model — pro4sail","text":"R wrapper PRO4SAIL model","code":""},{"path":"/reference/pro4sail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PRO4SAIL model — pro4sail","text":"","code":"pro4sail(param)"},{"path":"/reference/pro4sail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PRO4SAIL model — pro4sail","text":"param Vector PRO4SAIL parameter values: * N: Effective number leaf layers (>1) * Cab: Leaf chlorophyll content (ug/cm2) (>0) * Car: Leaf carotenoid content (ug/cm2) (>0) * Cbrown: Leaf brown matter content (ug/cm2) (>0) * Cw: Leaf water content (cm) (>0) * Cm: Leaf dry matter content (ug/cm2) (>0) * LIDFa: Leaf angle distribution function - parameter * LIDFb: Leaf angle distribution function - parameter b * TypeLIDF: Leaf angle distribution function type (1 2) * LAI: Leaf area index * q: Hot spot effect parameter * tts: Solar zenith angle * tto: Observer zenith angle * psi: Sun-sensor azimuth angle * psoil: Fraction soil moisture","code":""},{"path":"/reference/pro4sail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PRO4SAIL model — pro4sail","text":"Spectra matrix (see spectra()) (2101 x 4) reflectance factors wavelengths 400 2500nm: * bi-hemispherical reflectance (rddt) * hemispherical directional (rsdt) * directional hemispherical (rdot) * bi-directional (rsot)","code":""},{"path":"/reference/pro4sail.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PRO4SAIL model — pro4sail","text":"Alexey Shiklomanov","code":""},{"path":"/reference/pro4saild.html","id":null,"dir":"Reference","previous_headings":"","what":"PRO4SAILD model — pro4saild","title":"PRO4SAILD model — pro4saild","text":"R wrapper PRO4SAILD model","code":""},{"path":"/reference/pro4saild.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PRO4SAILD model — pro4saild","text":"","code":"pro4saild(param)"},{"path":"/reference/pro4saild.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PRO4SAILD model — pro4saild","text":"param Vector PRO4SAIL parameter values: * N: Effective number leaf layers (>1) * Cab: Leaf chlorophyll content (ug/cm2) (>0) * Car: Leaf carotenoid content (ug/cm2) (>0) * Canth: Leaf anthocyanin content (ug/cm2) (>0) * Cbrown: Leaf brown matter content (ug/cm2) (>0) * Cw: Leaf water content (cm) (>0) * Cm: Leaf dry matter content (ug/cm2) (>0) * LIDFa: Leaf angle distribution function - parameter * LIDFb: Leaf angle distribution function - parameter b * TypeLIDF: Leaf angle distribution function type (1 2) * LAI: Leaf area index * q: Hot spot effect parameter * tts: Solar zenith angle * tto: Observer zenith angle * psi: Sun-sensor azimuth angle * psoil: Fraction soil moisture","code":""},{"path":"/reference/pro4saild.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PRO4SAILD model — pro4saild","text":"Spectra matrix (see spectra()) (2101 x 4) reflectance factors wavelengths 400 2500nm: * bi-hemispherical reflectance (rddt) * hemispherical directional (rsdt) * directional hemispherical (rdot) * bi-directional (rsot)","code":""},{"path":"/reference/pro4saild.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PRO4SAILD model — pro4saild","text":"Alexey Shiklomanov, Shawn Serbin","code":""},{"path":"/reference/prospect.html","id":null,"dir":"Reference","previous_headings":"","what":"PROSPECT (4, 5, or 5B) model — prospect","title":"PROSPECT (4, 5, or 5B) model — prospect","text":"R wrapper PROSPECT models","code":""},{"path":"/reference/prospect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PROSPECT (4, 5, or 5B) model — prospect","text":"","code":"prospect(param, version)"},{"path":"/reference/prospect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PROSPECT (4, 5, or 5B) model — prospect","text":"param Vector PROSPECT parameter values: * N: Effective number leaf layers (>1) * Cab: Leaf chlorophyll content (ug/cm2) (>0) * (5) Car: Leaf carotenoid content (ug/cm2) (>0) * (D) Canth: Leaf anthocyanin content (ug/cm2) (>0) * (5B, D) Cbrown: Leaf brown matter content (ug/cm2) (>0) * Cw: Leaf water content (cm) (>0) * Cm: Leaf dry matter content (ug/cm2) (>0) version PROSPECT version: 4, 5, '5B'","code":""},{"path":"/reference/prospect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PROSPECT (4, 5, or 5B) model — prospect","text":"Object class spectra (see spectra()) simulated reflectance (column 1) transmittance (column 2) 400 2500 nm","code":""},{"path":"/reference/prospect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PROSPECT (4, 5, or 5B) model — prospect","text":"Alexey Shiklomanov","code":""},{"path":"/reference/prospect_bt_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick BayesianTools prior creator for PROSPECT model — prospect_bt_prior","title":"Quick BayesianTools prior creator for PROSPECT model — prospect_bt_prior","text":"Quick BayesianTools prior creator PROSPECT model","code":""},{"path":"/reference/prospect_bt_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick BayesianTools prior creator for PROSPECT model — prospect_bt_prior","text":"","code":"prospect_bt_prior(version, custom_prior = list())"},{"path":"/reference/prospect_bt_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick BayesianTools prior creator for PROSPECT model — prospect_bt_prior","text":"version PROSPECT version: 4, 5, '5B' custom_prior List containing param_name, distn, parama, paramb, lower","code":""},{"path":"/reference/read.rsr.folder.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process RSR data from directory — read.rsr.folder","title":"Read and process RSR data from directory — read.rsr.folder","text":"Read process RSR data directory","code":""},{"path":"/reference/read.rsr.folder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process RSR data from directory — read.rsr.folder","text":"","code":"read.rsr.folder(dir.path, type)"},{"path":"/reference/read.rsr.folder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process RSR data from directory — read.rsr.folder","text":"dir.path Directory containing RSR data type Type sensor. Options : landsat, avhrr","code":""},{"path":"/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample vector, matrix, or spectra — resample","title":"Resample vector, matrix, or spectra — resample","text":"Convenient wrapper around base R's splinefun approxfun. See stats::splinefun() stats::approxfun() documentation information different spline methods additional arguments.","code":""},{"path":"/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample vector, matrix, or spectra — resample","text":"","code":"resample(values, ...)  # Default S3 method resample(values, from, to, method = \"fmm\", ...)  # S3 method for class 'matrix' resample(values, from, to, ...)  # S3 method for class 'spectra' resample(values, to, ...)"},{"path":"/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample vector, matrix, or spectra — resample","text":"values Vector matrix values, object class spectra(). Length vector, nrow matrix must match length . spectra, argument omitted taken wavelengths. ... Additional arguments stats::splinefun() stats::approxfun() X values interpolation (spectra objects, assumed wavelengths attribute.) Y values onto interpolate. spectra objects, new wavelengths. method One methods stats::splinefun() (polynomial periodic splines) stats::approxfun() (constant linear). Default \"fmm\" (splinefun).","code":""},{"path":"/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample vector, matrix, or spectra — resample","text":"Object class values, resampled values.","code":""},{"path":"/reference/rsr.from.fwhm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate relative spectral response (RSR) matrix based on FWHM data — rsr.from.fwhm","title":"Generate relative spectral response (RSR) matrix based on FWHM data — rsr.from.fwhm","text":"Generate relative spectral response (RSR) matrix based FWHM data","code":""},{"path":"/reference/rsr.from.fwhm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate relative spectral response (RSR) matrix based on FWHM data — rsr.from.fwhm","text":"","code":"rsr.from.fwhm(wavelength, fwhm)"},{"path":"/reference/rsr.from.fwhm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate relative spectral response (RSR) matrix based on FWHM data — rsr.from.fwhm","text":"wavelength Vector average band widths, reported FWHM data. fwhm Vector full-width half maximum (FWHM) bandwidths, reported FWHM data.","code":""},{"path":"/reference/rtm_loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic log-likelihood generator for RTMs — rtm_loglike","title":"Generic log-likelihood generator for RTMs — rtm_loglike","text":"Generic log-likelihood generator RTMs","code":""},{"path":"/reference/rtm_loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic log-likelihood generator for RTMs — rtm_loglike","text":"","code":"rtm_loglike(nparams, model, observed, lag.max = NULL, verbose = TRUE, ...)"},{"path":"/reference/rtm_loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic log-likelihood generator for RTMs — rtm_loglike","text":"nparams number parameters model model function minimize observed vector observations lag.max passed neff() verbose logical: print extra diagnostics run? ... additional arguments passed model function","code":""},{"path":"/reference/rtnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Random sampling from one-sided truncated normal distribution — rtnorm","title":"Random sampling from one-sided truncated normal distribution — rtnorm","text":"Random sampling one-sided truncated normal distribution","code":""},{"path":"/reference/rtnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random sampling from one-sided truncated normal distribution — rtnorm","text":"","code":"rtnorm(mu, sd, MIN)"},{"path":"/reference/rtnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random sampling from one-sided truncated normal distribution — rtnorm","text":"mu mean parameter truncated normal. NOTE equal mean distribution sd standard deviation parameter truncated normal. , NOTE tht SD distribution. MIN minimum value, defines truncation.","code":""},{"path":"/reference/rtnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random sampling from one-sided truncated normal distribution — rtnorm","text":"Numeric length one.","code":""},{"path":"/reference/rtnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random sampling from one-sided truncated normal distribution — rtnorm","text":"Draws random number , fall within specified range, resample using adjusted Normal CDF. performed immediately CDF sampling calls three functions – qnorm, runif, pnorm–therefore much less efficient simple random sample.","code":""},{"path":"/reference/rtnorm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random sampling from one-sided truncated normal distribution — rtnorm","text":"Alexey Shiklomanov","code":""},{"path":"/reference/sensor.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensor spectral response functions — sensor.list","title":"Sensor spectral response functions — sensor.list","text":"Sensor spectral response functions","code":""},{"path":"/reference/sensor.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensor spectral response functions — sensor.list","text":"","code":"sensor.list"},{"path":"/reference/sensor.list.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sensor spectral response functions — sensor.list","text":"object class character length 12.","code":""},{"path":"/reference/sensor.proper.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensor list with proper names — sensor.proper","title":"Sensor list with proper names — sensor.proper","text":"Sensor list proper names","code":""},{"path":"/reference/sensor.proper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensor list with proper names — sensor.proper","text":"","code":"sensor.proper"},{"path":"/reference/sensor.proper.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sensor list with proper names — sensor.proper","text":"object class character length 12.","code":""},{"path":"/reference/setup_edr.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup EDR run — setup_edr","title":"Setup EDR run — setup_edr","text":"Using existing ED2IN file template, create new ED2IN history file configured running EDR.","code":""},{"path":"/reference/setup_edr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup EDR run — setup_edr","text":"","code":"setup_edr(   ed2in,   output_dir,   datetime = ISOdatetime(ed2in[[\"IYEARA\"]], ed2in[[\"IMONTHA\"]], ed2in[[\"IDATEA\"]], 12, 0,     0, tz = \"UTC\"),   ... )"},{"path":"/reference/setup_edr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup EDR run — setup_edr","text":"ed2in ED2IN list object (see PEcAn.ED2::read_ed2in). output_dir Directory run files stored datetime Date time object (compliant string) run EDR. Defaults 12 noon start date ED2IN. ... Additional arguments passed PEcAn.ED2::modify_ed2in","code":""},{"path":"/reference/setup_edr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup EDR run — setup_edr","text":"Path EDR-configured ED2IN file.","code":""},{"path":"/reference/setup_edr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup EDR run — setup_edr","text":"Alexey Shiklomanov","code":""},{"path":"/reference/spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectra S3 class — spectra","title":"Spectra S3 class — spectra","text":"Spectra S3 class","code":""},{"path":"/reference/spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectra S3 class — spectra","text":"","code":"spectra(spectra, wavelengths = 400:2500)  is_spectra(spectra)"},{"path":"/reference/spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectra S3 class — spectra","text":"spectra Vector (length = length(wavelengths)) matrix (ncol = length(wavelengths)) wavelengths Wavelengths spectra.","code":""},{"path":"/reference/spectra.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Spectra S3 class — spectra","text":"is_spectra(): Test object class spectra","code":""},{"path":"/reference/spectral.response.html","id":null,"dir":"Reference","previous_headings":"","what":"Convolution of spectra to sensor RSR — spectral.response","title":"Convolution of spectra to sensor RSR — spectral.response","text":"Convolution spectra sensor RSR","code":""},{"path":"/reference/spectral.response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolution of spectra to sensor RSR — spectral.response","text":"","code":"spectral.response(spec, sensor)"},{"path":"/reference/spectral.response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolution of spectra to sensor RSR — spectral.response","text":"spec Full (1 nm) spectrum (vector) sensor Sensor name (string). See sensor.list","code":""},{"path":"/reference/str.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of spectra object — str.spectra","title":"Structure of spectra object — str.spectra","text":"Structure spectra object","code":""},{"path":"/reference/str.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structure of spectra object — str.spectra","text":"","code":"# S3 method for class 'spectra' str(spectra, ...)"},{"path":"/reference/str.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structure of spectra object — str.spectra","text":"spectra Object class spectra ... additional arguments, currently ignored","code":""},{"path":"/reference/sub-.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Select spectra — [.spectra","title":"Select spectra — [.spectra","text":"Select spectra","code":""},{"path":"/reference/sub-.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select spectra — [.spectra","text":"","code":"# S3 method for class 'spectra' spectra[i, j, drop = FALSE]"},{"path":"/reference/sub-.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select spectra — [.spectra","text":"spectra Object class spectra , j indices specifying elements extract replace. See base::Extract details. drop Coerce result lowest dimension possible? See base::drop() details.","code":""},{"path":"/reference/sub-sub-.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Select spectra by wavelength — [[.spectra","title":"Select spectra by wavelength — [[.spectra","text":"Select spectra wavelength","code":""},{"path":"/reference/sub-sub-.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select spectra by wavelength — [[.spectra","text":"","code":"# S3 method for class 'spectra' spectra[[wavelength, j]]"},{"path":"/reference/sub-sub-.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select spectra by wavelength — [[.spectra","text":"spectra Object class spectra wavelength Wavelength vector select j index specifying elements extract replace. See base::Extract details.","code":""},{"path":"/reference/sub-subset-.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign values to spectra by wavelength — [[<-.spectra","title":"Assign values to spectra by wavelength — [[<-.spectra","text":"Assign values spectra wavelength","code":""},{"path":"/reference/sub-subset-.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign values to spectra by wavelength — [[<-.spectra","text":"","code":"# S3 method for class 'spectra' spectra[[wavelength, j]] <- value"},{"path":"/reference/sub-subset-.spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign values to spectra by wavelength — [[<-.spectra","text":"spectra Object class spectra wavelength Wavelength vector select j index specifying elements extract replace. See base::Extract details. value Vector matrix values assign","code":""},{"path":"/reference/summary_mvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate normal fit — summary_mvnorm","title":"Multivariate normal fit — summary_mvnorm","text":"Fit multivariate normal samples. Return means covariance matrix long list (easy construction data.tables)","code":""},{"path":"/reference/summary_mvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate normal fit — summary_mvnorm","text":"","code":"summary_mvnorm(samples)"},{"path":"/reference/summary_mvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate normal fit — summary_mvnorm","text":"samples Matrix MCMC samples.","code":""},{"path":"/reference/summary_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple summary statistics on MCMC samples — summary_simple","title":"Simple summary statistics on MCMC samples — summary_simple","text":"Calculate simple univariate summary statistics return named list","code":""},{"path":"/reference/summary_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple summary statistics on MCMC samples — summary_simple","text":"","code":"summary_simple(samples)"},{"path":"/reference/summary_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple summary statistics on MCMC samples — summary_simple","text":"samples Matrix MCMC samples","code":""},{"path":"/reference/trim.rsr.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim RSR matrix to wavelength limits — trim.rsr","title":"Trim RSR matrix to wavelength limits — trim.rsr","text":"Trim RSR matrix wavelength limits","code":""},{"path":"/reference/trim.rsr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim RSR matrix to wavelength limits — trim.rsr","text":"","code":"trim.rsr(rsr, wl.min = 400, wl.max = 2500)"},{"path":"/reference/trim.rsr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim RSR matrix to wavelength limits — trim.rsr","text":"rsr RSR matrix wl.min Minimum wavelength (inclusive, default = 400) wl.max Maximum wavelength (inclusive, default = 2500)","code":""},{"path":"/reference/wavelengths.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve wavelengths from spectra object — wavelengths","title":"Retrieve wavelengths from spectra object — wavelengths","text":"Retrieve wavelengths spectra object","code":""},{"path":"/reference/wavelengths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve wavelengths from spectra object — wavelengths","text":"","code":"wavelengths(spectra)"},{"path":"/reference/wavelengths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve wavelengths from spectra object — wavelengths","text":"spectra Object class spectra","code":""},{"path":[]},{"path":"/news/index.html","id":"license-change-1-7-4","dir":"Changelog","previous_headings":"","what":"License change","title":"PEcAnRTM 1.7.4","text":"PEcAnRTM now distributed BSD three-clause license instead NCSA Open Source license.","code":""},{"path":"/news/index.html","id":"fixed-1-7-4","dir":"Changelog","previous_headings":"","what":"Fixed","title":"PEcAnRTM 1.7.4","text":"Roxygen fixes Fixed vignette compilation","code":""},{"path":"/news/index.html","id":"added-1-7-4","dir":"Changelog","previous_headings":"","what":"Added","title":"PEcAnRTM 1.7.4","text":"Added NEWS.md file track changes package. Prior point changes tracked main CHANGELOG PEcAn repository.","code":""}]
