[{"path":"/articles/create_amerifluxLBL_drivers_for_maat.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"PEcAn: Generating met drivers for the MAAT model using AmerifluxLBL tower observations","text":"demonstration PEcAn utilities downloading met data, converting PEcAn-CF format (based Climate Forecasting conventions similar MsTMIP), gapfilling CF driver data, converting model-specific drivers MAAT model. variables defined PEcAn documentation. example download 6 years met data Willow Creek Eddy Covariance tower site (US-WCr). Ameriflux SITE_ID US-WCr PEcAn.data.atmosphere source code modules/data.atmosphere documentation can found either package?PEcAn.data.atmosphere data.atmosphere package documentation. First make sure nescessary PEcAn package processing met data","code":"options(repos = c(getOption(\"repos\"), PEcAn = \"pecanproject.r-universe.dev\")) install.packages(\"PEcAn.data.atmosphere\") library(PEcAn.data.atmosphere)"},{"path":"/articles/create_amerifluxLBL_drivers_for_maat.html","id":"connect-to-bety-database-and-retrieve-appropriate-format-for-amerifluxlbl-datasets-todo-update-to-work-with-r-opensci-traits-bety","dir":"Articles","previous_headings":"Overview","what":"Connect to BETY database and retrieve appropriate format for AmerifluxLBL datasets [TODO: Update to work with R-OpenSci traits BETY]","title":"PEcAn: Generating met drivers for the MAAT model using AmerifluxLBL tower observations","text":"(Note: avoid needing database connection vignette build time, use code display compiled vignette construct static version format object. running document interactively, live database connention, can use result query.format.vars directly.)","code":"con <- PEcAn.DB::db.open(    list(user='bety', password='bety', host='localhost',         dbname='bety', driver='PostgreSQL',write=TRUE)) format.id <- 5000000002 format <- PEcAn.DB::query.format.vars(format.id=format.id,bety = con) format$time_zone <- \"America/Chicago\" # copy-pasted from `dput(format)` after evaluating the `bety` chunk above # using Chris Black's development version of BeTY on 2024-09-16 format <- list(    file_name = \"AMERIFLUX_BASE_HH\",    mimetype = \"csv\",    vars = structure(       list(          bety_name = c(\"air_pressure\", \"airT\", \"co2atm\", \"datetime\", \"FC\", \"H\",             \"LE\", \"NEE\", \"PAR\", \"precipitation_flux\", \"relative_humidity\",             \"soilM\", \"soilT\", \"solar_radiation\", \"specific_humidity\",             \"surface_downwelling_longwave_flux_in_air\", \"TotalResp\", \"UST\",             \"VPD\", \"wind_direction\", \"Wspd\"),          variable_id = c(554, 86, 135, 5000000001, 1000000042, 299, 298, 297,             136, 555, 556, 391, 379, 547, 557, 561, 1000000206, 1000000041, 387,             560, 390),          input_name = c(\"PA\", \"TA\", \"CO2_1\", \"TIMESTAMP_START\", \"FC\", \"H\", \"LE\",             \"NEE_PI\", \"PPFD_IN\", \"P\", \"RH\", \"SWC_1\", \"TS_1\", \"SW_IN\", \"H2O\",             \"LW_IN\", \"RECO_PI\", \"USTAR\", \"VPD\", \"WD\", \"WS\"),          input_units = c(\"kPa\", \"celsius\", \"umol mol-1\", \"ymd_hms\",             \"umol C m-2 s-1\", \"W m-2\",\"W m-2\", \"umol C m-2 s-1\", \"umol m-2 s-1\",             \"kg m-2 (30 minute)-1\", \"percent\", \"%\", \"celsius\", \"W m-2\",             \"g kg-1\", \"W m-2\", \"umol C m-2 s-1\", \"m s-1\", \"hPa\", \"degrees\",             \"m s-1\"),          storage_type = c(\"\", \"\", \"\", \"%Y%m%d%H%M\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",             \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"),          column_number = c(19L, 4L, 20L, 1L, 8L, 10L, 12L, 7L, 26L, 17L, 18L,             23L, 15L, 27L, 33L, 31L, NA, 3L, NA, 5L, 6L),          bety_units = c(\"Pa\", \"degrees C\", \"ppm (= umol mol-1)\", \"ymd_hms\",             \"umol C m-2 s-1\", \"W m-2\", \"W m-2\", \"umol C m-2 s-1\",             \"umol m-2 s-1\", \"Kg/m2/s\", \"%\", \"%\", \"degrees C\", \"W/m^2\", \"g g-1\",             \"W m-2\", \"kg C m-2 s-1\", \"m s-1\", \"Pa\", \"degrees\", \"m s-1\"),          mstmip_name = c(\"Psurf\", \"Tair\", \"CO2air\", NA, \"FC\", \"Qh\", \"Qle\",             \"NEE\", NA, \"Rainf\", NA, \"SoilMoistFrac\", \"SoilTemp\", \"SWdown\",             \"Qair\", \"LWdown\", \"TotalResp\", NA, NA, NA, NA),          mstmip_units = c(\"Pa\", \"K\", \"micromol mol-1\", NA, \"kg C m-2 s-1\",             \"W m-2\", \"W m-2\", \"kg C m-2 s-1\", NA, \"kg m-2 s-1\", NA, \"1\", \"K\",             \"W/m^2\", \"kg kg-1\", \"W/m2\", \"kg C m-2 s-1\", NA, NA, NA, NA),          pecan_name = c(\"Psurf\", \"Tair\", \"CO2air\", \"datetime\", \"FC\", \"Qh\",             \"Qle\", \"NEE\", \"PAR\", \"Rainf\", \"relative_humidity\", \"SoilMoistFrac\",             \"SoilTemp\", \"SWdown\", \"Qair\", \"LWdown\", \"TotalResp\", \"UST\", \"VPD\",             \"wind_direction\", \"Wspd\"),          pecan_units = c(\"Pa\", \"K\", \"micromol mol-1\", \"ymd_hms\", \"kg C m-2 s-1\",             \"W m-2\", \"W m-2\", \"kg C m-2 s-1\", \"umol m-2 s-1\", \"kg m-2 s-1\", \"%\",             \"1\", \"K\", \"W/m^2\", \"kg kg-1\", \"W/m2\", \"kg C m-2 s-1\", \"m s-1\", \"Pa\",             \"degrees\", \"m s-1\")),       row.names = c(NA, -21L),       class = \"data.frame\"),    skip = 2,    header = 1,    na.strings = c(\"-9999\", \"-6999\", \"9999\", \"NA\"),    time.row = 4L,    site = NULL,    lat = NULL,    lon = NULL,    time_zone = \"America/Chicago\")"},{"path":"/articles/create_amerifluxLBL_drivers_for_maat.html","id":"download-amerifluxlbl-data-for-selected-site-and-dates-us-wcr-2000-to-2005","dir":"Articles","previous_headings":"Overview","what":"Download AmerifluxLBL data for selected site and dates (US-WCr, 2000 to 2005)","title":"PEcAn: Generating met drivers for the MAAT model using AmerifluxLBL tower observations","text":"","code":"m2mdir <- tempfile(\"met2model_testing\") dir.create(m2mdir) download.AmerifluxLBL(sitename = \"US-WCr\", outfolder = m2mdir,                    start_date = \"2000-01-01\", end_date = \"2005-12-31\", overwrite = TRUE, verbose = TRUE) ## Data use guidelines for AmeriFlux CC-BY-4.0 Data Policy: ##  ## (1) Data user is free to Share (copy and redistribute the material in any medium or format) and/or Adapt (remix, transform, and build upon the material) for any purpose. ## (2) Provide a citation to each site data product that includes the data-product DOI and/or recommended publication. ## (3) Acknowledge funding for supporting AmeriFlux data portal: U.S. Department of Energy Office of Science. ##                                                                        file ## 1 /tmp/RtmpmUJtwV/met2model_testing47fc22fe1834/AMF_US-WCr_BASE_HH_33-5.csv ##           host mimetype        formatname        startdate          enddate ## 1 eaea3f697b11 text/csv AMERIFLUX_BASE_HH 1998-01-01 00:00 2025-04-09 23:30 ##               dbfile.name ## 1 AMF_US-WCr_BASE_HH_33-5"},{"path":"/articles/create_amerifluxLBL_drivers_for_maat.html","id":"convert-downloaded-amerifluxlbl-data-to-cf-format","dir":"Articles","previous_headings":"Overview","what":"Convert downloaded AmerifluxLBL data to CF format","title":"PEcAn: Generating met drivers for the MAAT model using AmerifluxLBL tower observations","text":"","code":"cfdir <- file.path(m2mdir, \"CF\") met2CF.AmerifluxLBL(in.path = m2mdir, in.prefix = \"AMF_US-WCr\", outfolder = cfdir,                  start_date = \"2000-01-01\", end_date = \"2005-12-31\",format=format)"},{"path":"/articles/create_amerifluxLBL_drivers_for_maat.html","id":"gapfill-cf-met-drivers","dir":"Articles","previous_headings":"Overview","what":"Gapfill CF met drivers","title":"PEcAn: Generating met drivers for the MAAT model using AmerifluxLBL tower observations","text":"","code":"gapfilldir <- file.path(cfdir, \"gapfill\") metgapfill(in.path = cfdir, in.prefix = \"AMF_US-WCr_BASE_HH_14-5\",            outfolder = gapfilldir, start_date = \"2000-01-01\", end_date = \"2005-12-31\")"},{"path":"/articles/create_amerifluxLBL_drivers_for_maat.html","id":"create-maat-model-specific-met-drivers","dir":"Articles","previous_headings":"Overview","what":"Create MAAT model-specific met drivers","title":"PEcAn: Generating met drivers for the MAAT model using AmerifluxLBL tower observations","text":"","code":"in.path <- gapfilldir in.prefix <- \"AMF_US-WCr_BASE_HH_14-5\" outfolder <- file.path(gapfilldir, \"maat_drivers\") start_date <- \"2000-01-01\" end_date <- \"2005-12-31\" overwrite <- TRUE verbose <- TRUE leap_year = TRUE PEcAn.MAAT::met2model.MAAT(in.path, in.prefix, outfolder, start_date, end_date,                            overwrite = overwrite, verbose = verbose) ## [1] \"internal results\" ##                                                                                                                      file ## 1 /tmp/RtmpmUJtwV/met2model_testing47fc22fe1834/CF/gapfill/maat_drivers/AMF_US-WCr_BASE_HH_14-5.2000-01-01.2005-12-31.csv ##           host mimetype       formatname  startdate    enddate ## 1 eaea3f697b11 text/csv MAAT meteorology 2000-01-01 2005-12-31 ##                                         dbfile.name ## 1 AMF_US-WCr_BASE_HH_14-5.2000-01-01.2005-12-31.csv ## [1] \"Skipping to next year\" ## [1] \"Skipping to next year\" ## [1] \"Skipping to next year\" ## [1] \"Skipping to next year\" ## [1] \"Skipping to next year\" ## [1] \"Skipping to next year\" ## [1] \"NO MET TO OUTPUT\""},{"path":"/articles/running_maat_in_pecan.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Running MAAT in PEcAn","text":"simple example show setup run MAAT simulations within PEcAn framework. Running MAAT model within PEcAn provides access additional tools PEcAn met process functions enable creation model-specific met driver files using various sources reanalysis products including CRU-NCEP NARR, well site-level tower observations AmerifluxLBL FLUXNET. addition, PEcAn framework provides ability define custom plant functional types (PFTs) MAAT simulation conduct multi-ensemble simulations using observationally-constrained MAAT parameter distributions based hierarchical Bayesian meta-analysis approach linked BETYdb trait database (betydb.org). Presently full MAAT process representation, functionality tools yet fully enabled PEcAn framework adding MAAT functionality planned future updates PEcAn wrapper code.","code":""},{"path":"/articles/running_maat_in_pecan.html","id":"maat-installation-and-usage","dir":"Articles","previous_headings":"Overview","what":"MAAT Installation and usage","title":"Running MAAT in PEcAn","text":"MAAT model source: https://github.com/walkeranthonyp/MAAT  Follow instructions found : https://github.com/walkeranthonyp/MAAT/blob/master/README.md","code":""},{"path":"/articles/running_maat_in_pecan.html","id":"installing-the-r-packages","dir":"Articles","previous_headings":"Overview","what":"Installing the R packages","title":"Running MAAT in PEcAn","text":"","code":"options(repos = c(getOption(\"repos\"), PEcAn = \"pecanproject.r-universe.dev\")) install.packages(\"PEcAn.MAAT\") library(PEcAn.MAAT)"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"/articles/running_maat_in_pecan.html","id":"e-g--pecan-xml-file-with-maat-configuration-options-","dir":"Articles","previous_headings":"Overview > Full PEcAn XML configuration with MAAT options","what":"E.g. pecan.xml file with MAAT configuration options.","title":"Running MAAT in PEcAn","text":"example MAAT model configured temperate deciduous forest based temperate.deciduous PFT BETYdb database (https://www.betydb.org/pfts/2000000044).","code":""},{"path":"/articles/running_maat_in_pecan.html","id":"simple-maat-run-in-pecan","dir":"Articles","previous_headings":"Overview","what":"Simple MAAT run in PEcAn","title":"Running MAAT in PEcAn","text":"example run ten MAAT model ensembles serial based parameter values derived temperate.deciduous PFT BETYdb database (https://www.betydb.org/pfts/2000000044) PEcAn meta analysis step chunk shown currently executed vignette build time, running requires connection PEcAn database. Example output MAAT assimilation rate five PEcAn model esemble simulations. green shaded area represents ensemble spread grey line shows mean simulation.","code":"rundir <- tempfile(\"maat_pecan_test_run\") dir.create(rundir) setwd(rundir) settings <- PEcAn.settings::read.settings(system.file(\"pecan.maat.xml\", package=\"PEcAn.MAAT\", mustWork = TRUE)) settings$outdir <- rundir settings <- PEcAn.settings::prepare.settings(settings, force=FALSE) PEcAn.logger::logger.info(paste0(\"Main output directory: \",settings$outdir))  # Write pecan.CHECKED.xml PEcAn.settings::write.settings(settings, outputfile = \"pecan.CHECKED.xml\")  # start from scratch if no continue is passed in statusFile <- file.path(settings$outdir, \"STATUS\") if (length(which(commandArgs() == \"--continue\")) == 0 && file.exists(statusFile)) {   file.remove(statusFile) }  # Do conversions settings <- PEcAn.workflow::do_conversions(settings)  # Query the trait database for data and priors if (PEcAn.utils::status.check(\"TRAIT\") == 0){   PEcAn.utils::status.start(\"TRAIT\")   settings <- PEcAn.workflow::runModule.get.trait.data(settings)   PEcAn.settings::write.settings(settings, outputfile='pecan.TRAIT.xml')   PEcAn.utils::status.end() } else if (file.exists(file.path(settings$outdir, 'pecan.TRAIT.xml'))) {   settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.TRAIT.xml')) }  # Run the PEcAn meta.analysis if(!is.null(settings$meta.analysis)) {   if (PEcAn.utils::status.check(\"META\") == 0){     PEcAn.utils::status.start(\"META\")     PEcAn.MA::runModule.run.meta.analysis(settings)     PEcAn.utils::status.end()   } }  # Write model specific configs if (PEcAn.utils::status.check(\"CONFIG\") == 0){   PEcAn.utils::status.start(\"CONFIG\")   settings <- PEcAn.workflow::runModule.run.write.configs(settings)   PEcAn.settings::write.settings(settings, outputfile='pecan.CONFIGS.xml')   PEcAn.utils::status.end() } else if (file.exists(file.path(settings$outdir, 'pecan.CONFIGS.xml'))) {   settings <- PEcAn.settings::read.settings(file.path(settings$outdir, 'pecan.CONFIGS.xml')) }  # Start MAAT model runs if (PEcAn.utils::status.check(\"MODEL\") == 0) {   PEcAn.utils::status.start(\"MODEL\")   PEcAn.workflow::runModule_start_model_runs(settings,stop.on.error=FALSE)   PEcAn.utils::status.end() }  PEcAn.logger::logger.info(\"*** Wait for model runs to finish. Since this is a serial execution of MAAT, it will take a few minutes ***\")  # Get results of model runs if (PEcAn.utils::status.check(\"OUTPUT\") == 0) {   PEcAn.utils::status.start(\"OUTPUT\")   runModule.get.results(settings)   PEcAn.utils::status.end() }  # Run ensemble analysis on model output. if ('ensemble' %in% names(settings) & PEcAn.utils::status.check(\"ENSEMBLE\") == 0) {   PEcAn.utils::status.start(\"ENSEMBLE\")   runModule.run.ensemble.analysis(settings, TRUE)   PEcAn.utils::status.end() }  # Pecan workflow complete if (PEcAn.utils::status.check(\"FINISHED\") == 0) {   PEcAn.utils::status.start(\"FINISHED\")   PEcAn.remote::kill.tunnel(settings)   db.query(paste(\"UPDATE workflows SET finished_at=NOW() WHERE id=\", settings$workflow$id, \"AND finished_at IS NULL\"), params=settings$database$bety)    # Send email if configured   if (!is.null(settings$email) && !is.null(settings$email$to) && (settings$email$to != \"\")) {     sendmail(settings$email$from, settings$email$to,              paste0(\"Workflow has finished executing at \", base::date()),              paste0(\"You can find the results on \", settings$email$url))   }   PEcAn.utils::status.end() }  db.print.connections() print(\"---------- PEcAn Workflow Complete ----------\")  print(\" \") print(\" \")  print(\"---------- Simple ensemble plot ----------\") # create a simple timeseries plot of the ensemble output  # get output and calculate some stats ensemble_output <- list.files(path = settings$outdir, pattern = \"ensemble.ts.NOENSEMBLEID.*Rdata\") load(file.path(settings$outdir,ensemble_output)) timeseries_stats <- apply(ensemble.ts$assimilation_rate,2,quantile,probs=c(0.025,0.5,0.975))  # create timeseries X axis x_axis <- seq(as.Date(settings$run$start.date), as.Date(settings$run$end.date), length.out=dim(timeseries_stats)[2])  # create a new plot window dev.new(width=14, height=8, unit=\"in\")  # create plot plot(x_axis, PEcAn.utils::misc.convert(timeseries_stats[2,],\"kg C m-2 s-1\",\"umol C m-2 s-1\"), type=\"l\",cex=0.00001, col=\"white\",      xlab=\"Time\", ylab=\"Assimilation_rate (umol/m2/s)\") polygon(c(x_axis ,rev(x_axis)),c(PEcAn.utils::misc.convert(timeseries_stats[3,],\"kg C m-2 s-1\",\"umol C m-2 s-1\"),                                   rev(PEcAn.utils::misc.convert(timeseries_stats[1,],\"kg C m-2 s-1\",\"umol C m-2 s-1\"))),         col=\"#99CC99\",border=\"#99CC99\") lines(x_axis,PEcAn.utils::misc.convert(timeseries_stats[2,],\"kg C m-2 s-1\",\"umol C m-2 s-1\"),lwd=1, lty=1, col=\"light grey\")  # close plot dev.off()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shawn Serbin. Author, maintainer. Anthony Walker. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Serbin S, Walker (2025). PEcAn.MAAT: PEcAn Package Integration MAAT Model. R package version 1.7.5, https://pecanproject.github.io.","code":"@Manual{,   title = {PEcAn.MAAT: PEcAn Package for Integration of the MAAT Model},   author = {Shawn Serbin and Anthony Walker},   year = {2025},   note = {R package version 1.7.5},   url = {https://pecanproject.github.io}, }"},{"path":"/index.html","id":"the-multi-assumption-architecture-and-testbed-maat-modelling-system-pecan-module","dir":"","previous_headings":"","what":"PEcAn Package for Integration of the MAAT Model","title":"PEcAn Package for Integration of the MAAT Model","text":"PEcAn module corresponding author  Shawn Serbin  Environmental Climate Sciences Department  Brookhaven National Laboratory sserbin@bnl.gov MAAT model description technical article: https://www.geosci-model-dev.net/11/3159/2018/gmd-11-3159-2018.html MAAT model author: Anthony Walker (walkerap@ornl.gov)","code":""},{"path":"/index.html","id":"maat-installation-and-usage","dir":"","previous_headings":"","what":"MAAT Installation and usage","title":"PEcAn Package for Integration of the MAAT Model","text":"MAAT model source: https://github.com/walkeranthonyp/MAAT  Follow instructions found : https://github.com/walkeranthonyp/MAAT/blob/master/README.md","code":""},{"path":"/index.html","id":"maat-module-installation","dir":"","previous_headings":"","what":"MAAT module installation","title":"PEcAn Package for Integration of the MAAT Model","text":"R dependencies: PEcAn packages - PEcAn.logger, PEcAn.remote, PEcAn.settings, PEcAn.utils. Additional dependencies: lubridate, ncdf4, udunits2, XML, within package –ncdf4 requires netCDF installed system level Easiest way install via install_github devtools package. want specific branch, install_github(..., ref=\"<branch>\"). , able load package typical R session.","code":"library(devtools) install_github(\"PecanProject/pecan\", ref = \"develop\", subdir=\"base/logger\") install_github(\"PecanProject/pecan\", ref = \"develop\", subdir=\"base/remote\") install_github(\"PecanProject/pecan\", ref = \"develop\", subdir=\"base/settings\") install_github(\"PecanProject/pecan\", ref = \"develop\", subdir=\"base/utils\") install_github(\"PecanProject/pecan\", ref = \"develop\", subdir=\"models/maat\")"},{"path":"/index.html","id":"maat-pecan-run-examples","dir":"","previous_headings":"","what":"MAAT-PEcAn run examples","title":"PEcAn Package for Integration of the MAAT Model","text":"See vignettes","code":""},{"path":"/reference/convert.samples.MAAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert samples for MAAT — convert.samples.MAAT","title":"Convert samples for MAAT — convert.samples.MAAT","text":"convert parameters parameter names PEcAn database default units/names MAAT","code":""},{"path":"/reference/convert.samples.MAAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert samples for MAAT — convert.samples.MAAT","text":"","code":"convert.samples.MAAT(trait.samples, runid)"},{"path":"/reference/convert.samples.MAAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert samples for MAAT — convert.samples.MAAT","text":"trait.samples matrix dataframe samples trait distribution runid optional parameter debugging","code":""},{"path":"/reference/convert.samples.MAAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert samples for MAAT — convert.samples.MAAT","text":"matrix dataframe values transformed","code":""},{"path":"/reference/convert.samples.MAAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert samples for MAAT — convert.samples.MAAT","text":"Performs model specific unit conversions list trait values, provided write.config","code":""},{"path":"/reference/convert.samples.MAAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert samples for MAAT — convert.samples.MAAT","text":"Shawn Serbin, Anthony Walker","code":""},{"path":"/reference/met2model.MAAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create MAAT met driver files — met2model.MAAT","title":"Create MAAT met driver files — met2model.MAAT","text":"met2model wrapper MAAT","code":""},{"path":"/reference/met2model.MAAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create MAAT met driver files — met2model.MAAT","text":"","code":"met2model.MAAT(   in.path,   in.prefix,   outfolder,   start_date,   end_date,   overwrite = FALSE,   verbose = FALSE,   leap_year = TRUE,   ... )"},{"path":"/reference/met2model.MAAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create MAAT met driver files — met2model.MAAT","text":".path location disk inputs (CF met drivers) stored .prefix prefix input output files outfolder location disk MAAT met outputs stored start_date start date data downloaded (use year part date) end_date end date data downloaded (use year part date) overwrite existing files overwritten verbose function verbose leap_year Enforce Leap-years? set TRUE, require leap years 366 days. set false, require years 365 days. Default = TRUE. ... additional arguments, currently ignored","code":""},{"path":"/reference/met2model.MAAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create MAAT met driver files — met2model.MAAT","text":"Shawn P. Serbin","code":""},{"path":"/reference/model2netcdf.MAAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to convert MAAT model output to standard netCDF format — model2netcdf.MAAT","title":"Function to convert MAAT model output to standard netCDF format — model2netcdf.MAAT","text":"Function convert MAAT model output standard netCDF format","code":""},{"path":"/reference/model2netcdf.MAAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to convert MAAT model output to standard netCDF format — model2netcdf.MAAT","text":"","code":"model2netcdf.MAAT(   rundir,   outdir,   sitelat = -999,   sitelon = -999,   start_date = NULL,   end_date = NULL )"},{"path":"/reference/model2netcdf.MAAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to convert MAAT model output to standard netCDF format — model2netcdf.MAAT","text":"rundir Location MAAT model run (.e. MAAT project) directory required model run inputs. needed identify model runs without met drivers control model output conversion process outdir Location MAAT model output sitelat Latitude site sitelon Longitude site start_date Start time simulation end_date End time simulation","code":""},{"path":"/reference/model2netcdf.MAAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to convert MAAT model output to standard netCDF format — model2netcdf.MAAT","text":"Shawn Serbin, Anthony Walker, Alexey Shiklomanov","code":""},{"path":"/reference/write.config.MAAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Writes a MAAT config file. — write.config.MAAT","title":"Writes a MAAT config file. — write.config.MAAT","text":"Requires pft xml object, list trait values single model run, name file create","code":""},{"path":"/reference/write.config.MAAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Writes a MAAT config file. — write.config.MAAT","text":"","code":"write.config.MAAT(defaults = NULL, trait.values, settings, run.id)"},{"path":"/reference/write.config.MAAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Writes a MAAT config file. — write.config.MAAT","text":"defaults list defaults process trait.values vector samples given trait settings list settings pecan settings file run.id id run","code":""},{"path":"/reference/write.config.MAAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Writes a MAAT config file. — write.config.MAAT","text":"configuration file MAAT given run","code":""},{"path":"/reference/write.config.MAAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Writes a MAAT config file. — write.config.MAAT","text":"Shawn Serbin, Anthony Walker, Rob Kooper, Chris Black","code":""},{"path":"/news/index.html","id":"pecanmaat-175","dir":"Changelog","previous_headings":"","what":"PEcAn.MAAT 1.7.5","title":"PEcAn.MAAT 1.7.5","text":"model2netcdf.MAAT longer writes separate <year>.nc.var files every year output. Use PEcAn.utils::nc_write_varfiles() create needed.","code":""},{"path":[]},{"path":"/news/index.html","id":"license-change-1-7-4","dir":"Changelog","previous_headings":"","what":"License change","title":"PEcAn.MAAT 1.7.4","text":"PEcAn.MAAT now distributed BSD three-clause license instead NCSA Open Source license. Vignette fixes","code":""},{"path":"/news/index.html","id":"added-1-7-4","dir":"Changelog","previous_headings":"","what":"Added","title":"PEcAn.MAAT 1.7.4","text":"Added NEWS.md file track changes package. Prior point changes tracked main CHANGELOG PEcAn repository.","code":""}]
